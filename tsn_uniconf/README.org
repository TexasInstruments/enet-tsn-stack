* xl4uniconf, Excelfore universal configuration daemon and libraries
** prerequisites
+ 'pyang' python program
To install 'pyang'
$ pip install pyang

+ To use 'lmdb' (selecting 'simpledb', this is not needed)
To install 'lmdb' development package
$ apt install liblmdb-dev

** how to build
*** configuration
building this module only
$ ./augoten.sh
$ cd build
$ ../configure --enable-dbname=simpledb|lmdb --enable-runconf=yes|no \
--enable-dot1qbridge=yes --enable-MODULES=yes ,,,
$ make

under stpl
$ cd stpl/build/xl4uniconf
$ ../../xl4uniconf/configure --enable-understpl --enable-dbname=simpledb|lmdb \
--enable_runconf=yes|no \
--enable-dot1qbridge=yes --enable-MODULE=yes ,,,

'simpledb' or 'lmdb' can be selected as the database.
'simpledb' is included in this package and no need of an external library.

+ 'simpledb' is multi threading only, and can't be used for multi processes.
+ 'lmdb' and 'qdbm' can be used for the both.

'enable-runconf' is 'yes' as the default.
It can be set 'no' when the runtime configuration is not needed and reducing the code
size is important.

'enable-MOUDULE' set adding a YANG module.
A module:'ietf-interfaces' is always needed and no option for it.
A module:'ieee802-dot1q-bridge' is build by the default, 'enable-dot1qbridge' option
controls it.

The other modules will be added as the development is on going.

** Develop new YANG modules
The YANG files, which can be processed, are hardcoded in 'yangs/gencode.mk'.
To add a new module, this file must be changed.

**** create 'tree'
As the first step, in 'yangs' directory run
$ make -f gencode.mk trees
It creates tree files for the YANG modules in 'yangs/gencode.mk'.
+ tree file: 'yangs/tree_xml/MODULE.tree

Edit this file to customize configuration itemes.
Normally we don't need to support all the items.
To disable items, add '#' mark after '+--'
E.G. in 'ietf-interface.tree', disable one 'description item:
#+BEGIN_SRC
module: ietf-interfaces
  +--rw interfaces
  |  +--rw interface* [name]
  |     +--rw name                        string ;key
  |     +--#rw description?                string
#+END_SRC

**** create skelton of xml
As the second step, in 'yangs' directory run
$ make -f gencode.mk xmls
It creates skelton xml files for the YANG modules in 'yangs/gencode.mk'.
+ xml file: 'yangs/tree_xml/MODULE-skelton.xml'
copy this file to 'yangs/tree_xml/MODULE.xml'
and edit this file to add build time configurations.
When only run-time configurations are needed, editing may not be needed.

**** generate c codes and build
Once the xml files are prepared, the following process can be covered by the
general build procedure.

'configure.ac' and 'Makefile.am' must be updated for newly added modules.

** build-time configuration
*** YANG
Update the xml file which is copied and edited from the skelton xml file.

*** NON-YANG
Write a new xml file from scratch as the same manner of the YANG xml.
Use attributes to define missing definitions.
#+BEGIN_SRC xml
<?xml version='1.0' encoding='UTF-8'?>
<xl4-extmod xmlns="xl4-extmod">
  <module1>
    <value_A type="int8" config="rw">-1</value_A>
  </module1>
</xl4-extmod>
#+END_SRC
This defines 'value_A' with 'int8_t' type.
+ 'type' attribute is mandatory needed.
+ 'config' attribute uses 'rw' as default if the attribute doesn't exist.

To define a list,
#+BEGIN_SRC xml
<netdev type="string" config="ro" delim=",">eth0,eth1,eth2,eth3</netdev>
#+END_SRC
this expression automatically creates,
  key='index0' keyvalue=0,1,2,3, value=eth0,eth1,eth2,eth3
  The tag name 'index0' and 'value' are added implicitly.

for 2 indexed keys
#+BEGIN_SRC xml
<bufsize type="int32" config="rw" delim=",:">100,200,300:1000,2000,3000</bufsize>
#+END_SRC
this expression automatically creates,
  key='index0' keyvalue=0,1
  key='index1' keyvalue=0,1,2
  i.e.
    bufsize|index0:0|index1:0|value 100
    bufsize|index0:0|index1:1|value 200
    ...
    bufsize|index0:1|index1:2|value 3000

To define a list of structures, use 'type' and 'keys' attributes.
#+BEGIN_SRC xml
<mltistruct type="list" keys="mindex0,mindex1">
  <mindex0 type="uint8">0</mindex0>
  <mindex1 type="uint8">0</mindex1>
  ...
</mltistruct>
<mltistruct type="list" keys="mindex0,mindex1">
  <mindex0 type="uint8">0</mindex0>
  <mindex1 type="uint8">1</mindex1>
  ...
</mltistruct>
#+END_SRC

** run-time configuration
*** configuration file format
+ One line defines one definition.
+ any white spaces at the top are ignored.
+ To combine multiple lines, add '\' at the end of line
+ comment line start with '#'
+ the definition consist of 2 parts separated by a space:
  KEY_PART VALUE_PART
+ It can add comment like:
  KEY_PART VALUE_PART # comment
+ the KEY_PART consists of node-key and value-key:
  /node-key0/node-key1|value-key1_0|/node-key2|value-key2_0|value-key2_1|/node-key3
+ When the node-key starts with '/', it defines from the top node:
  /ieee802-dot1q-bridge/bridges/bridge
+ The value-key is added as 'leaf:key_value' as follows:
  /ieee802-dot1q-bridge/bridges/bridge|name:bridge0/address 00:01:02:03:04:05
  in this case under the node:'/ieee802-dot1q-bridge/bridges/bridge',
  leaf='name' is a value-key and the key value is 'bridge0',
  and the address of 'bridge0' is defined as 00:01:02:03:04:05.
+ Following definitions under the previous definition starts without '/':
  component|name:component0/traffic-class-enabled true
  this is the same as:
  /ieee802-dot1q-bridge/bridges/bridge|name:bridge0/component|name:component0/traffic-class-enabled true
+ Following definitions under the previous definition starts without '..':
  /node-key0/node-key1/node-key2/node-key3 10
  ../node-keyA 20
  the second line is the same as:
  /node-key0/node-key1/node-keyA 20

  /node-key0/node-key1|kv1:0|kv2:0|/value 100
  ..|kv1:0|kv2:1|/value 200
  ../node-key1|kv1:0|kv2:1|/value 200
  the second line and ther third line are the same as:
  /node-key0/node-key1|kv1:0|kv2:1|/value 200

+ VALUE_PART is a string expression of the value.
  The KEY_PART <-> 'value type' map is created at the build time by reading YANG files.
  If the mapping doesn't exist, the configuration fails.
+ A complex case becomes like this:
  /ieee802-dot1q-bridge/bridges/bridge|name:bridge0/component|name:component0/filtering-database/filtering-entry|database-id:0|vids:100,200-220,300-400|address:00:01:02:03:04:05/entry-type 0 # 0 for static
  this line is too long, should be separated.
+ if the KEY_PART ends with '/', it doesn't set value but sets a position of the key.
  /ieee802-dot1q-bridge/bridges/bridge|name:bridge0/component|name:component0/filtering-database/
  filtering-entry|database-id:0|vids:100,200-220,300-400|address:00:01:02:03:04:05/entry-type 0 # 0 for static
  these 2 lines can work to define the value.
+ To set leaf-list with appending mode, add '+' at the end of the KEY_PART
+ ieee1588-ptp uses 'instance-domain-map', for
  (gptpInstance, domainIndex) -> (ieee1588-ptp instance)
  For this instance either (i) or (g,d) format can be used.
  /ieee1588-ptp/ptp/instances/instance|instance-index:1,0|/...: (1,0) is converted
  /ieee1588-ptp/ptp/instances/instance|instance-index:0|/...: No conversion
+ copying data under a list
  When most of list elements have the same initial values,
  making a copy of the first elemet data to the other elments.
  E.G. the next line make a copy from data in instance-index=0 to instance-index=1
  /ieee1588-ptp/ptp/instances/instance|instance-index:0| |instance-index:1|
  The copy doesn't overwrite existing data.

*** example
#+BEGIN_SRC
# configure YANG ieee802-dot1q-bridge
/ieee802-dot1q-bridge/bridges/bridge|name:bridge0|/address 10:11:12:13:14:15
up-time 5000000
component|name:component0|/
address 20:21:22:23:24:25
bridge-vlan/vlan|vid:0|/
untagged-ports+ eth1
untagged-ports+ eth2
# configure NON-YANG module1
/xl4-extmod/module1/uintegers/value_u32 200000
/xl4-extmod/module1/value_lis1|index0:0|/value red
/xl4-extmod/module1/value_list2|index0:1|index1:0|/value snake
..|index0:0|index1:0|/value mouse
#+END_SRC

** utilities
*** uniconfmon
'uniconfmon' is a tool to monitor what data is in the DB.

To read all data in the DB, run it without a specific node parameters,
#+BEGIN_SRC
$ uniconfmon -p ~/tmp/uniconfdb
unibase-1.1.4-8b7952c
config items
/ietf-interfaces/interfaces/interface/enabled: true
----------
status items
/ietf-interfaces/interfaces-state/interface/oper-status: 1
/ietf-interfaces/interfaces-state/interface/if-index: 3
/ietf-interfaces/interfaces-state/interface/phys-address: A0:CE:C8:C7:AD:74
/ietf-interfaces/interfaces-state/interface/speed: 10000000000
/ietf-interfaces/interfaces-state/interface/duplex: 1
#+END_SRC

To read data of a specific node, and repeat reading with a specific interval,
the next example read the network interface UP/DOWN status every 3 seconds.
#+BEGIN_SRC
$ uniconfmon -p ~/tmp/uniconfdb -n "/ietf-interfaces/interfaces-state/interface|name:enxa0cec8c7ad74|/oper-status" -i 3000
unibase-1.1.4-8b7952c
1
1
#+END_SRC
