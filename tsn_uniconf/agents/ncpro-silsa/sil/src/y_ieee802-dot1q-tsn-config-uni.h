/*
 * Copyright (c) 2023 Texas Instruments Incorporated
 * Copyright (c) 2023 Excelfore Corporation (https://excelfore.com)
 *
 * All rights reserved not granted herein.
 * Limited License.
 *
 * Texas Instruments Incorporated grants a world-wide, royalty-free,
 * non-exclusive license under copyrights and patents it now or hereafter
 * owns or controls to make, have made, use, import, offer to sell and sell ("Utilize")
 * this software subject to the terms herein. With respect to the foregoing patent
 * license, such license is granted solely to the extent that any such patent is necessary
 * to Utilize the software alone. The patent license shall not apply to any combinations which
 * include this software, other than combinations with devices manufactured by or for TI ("TI Devices").
 * No hardware patent is licensed hereunder.
 *
 * Redistributions must preserve existing copyright notices and reproduce this license (including the
 * above copyright notice and the disclaimer and (if applicable) source code license limitations below)
 * in the documentation and/or other materials provided with the distribution
 *
 * Redistribution and use in binary form, without modification, are permitted provided that the following
 * conditions are met:
 *
 * * No reverse engineering, decompilation, or disassembly of this software is permitted with respect to any
 * software provided in binary form.
 * * any redistribution and use are licensed by TI for use only with TI Devices.
 * * Nothing shall obligate TI to provide you with source code for the software licensed and provided to you in object code.
 *
 * If software source code is provided to you, modification and redistribution of the source code are permitted
 * provided that the following conditions are met:
 *
 * * any redistribution and use of the source code, including any resulting derivative works, are licensed by
 * TI for use only with TI Devices.
 * * any redistribution and use of any object code compiled from the source code and any resulting derivative
 * works, are licensed by TI for use only with TI Devices.
 *
 * Neither the name of Texas Instruments Incorporated nor the names of its suppliers may be used to endorse or
 * promote products derived from this software without specific prior written permission.
 *
 * DISCLAIMER.
 *
 * THIS SOFTWARE IS PROVIDED BY TI AND TI"S LICENSORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL TI AND TI"S LICENSORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
*/

#ifndef _H_y_ieee802_dot1q_tsn_config_uni
#define _H_y_ieee802_dot1q_tsn_config_uni
/*
 * Copyright (c) 2008 - 2012, Andy Bierman, All Rights Reserved.
 * Copyright (c) 2012 - 2022, YumaWorks, Inc., All Rights Reserved.
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 */

/**
 * @file y_ieee802-dot1q-tsn-config-uni.h
 * @brief YumaPro SIL-SA header for module ieee802-dot1q-tsn-config-uni
 *

*** Generated by yangdump-sdk 21.10-12

<pre>

    YumaPro SIL-SA header
    bundle x4ucsilsa
    module ieee802-dot1q-tsn-config-uni
    revision 2022-11-09
    prefix dot1q-tsn-config-uni
    namespace urn:ieee:std:802.1Q:yang:ieee802-dot1q-tsn-config-uni
    organization Institute of Electrical and Electronics Engineers
    Created: 2023-03-29T06:45:58Z

Online Developer Manual:
https://www.yumaworks.com/pub/21.10/dev/yumapro-dev-manual.html

    CLI parameters:
        defnames true
        deviation excelfore-interfaces
        deviation excelfore-gptp
        format yh
        indent 4
        module ietf-interfaces
        module ieee802-dot1q-bridge
        module ieee802-dot1q-tsn-config-uni
        module excelfore-interfaces
        module ieee1588-ptp
        module ieee802-dot1as-ptp
        module excelfore-gptp
        sil-bundle x4ucsilsa
        sil-edit2
        sil-get2
        sil-include tsn_uniconf/yangs/yang_db_access.h
        sil-include tsn_uniconf/yangs/yang_modules.h
        sil-sa
        unified true
</pre>

 */

#include <xmlstring.h>

#include "procdefs.h"
#include "dlq.h"
#include "ncxtypes.h"
#include "op.h"
#include "status.h"
#include "val.h"

#ifdef __cplusplus
extern "C" {
#endif

/**
 * @addtogroup yang-library YANG Library
 *
 * Collection of modules supported by the server.
 * Generated by yangdump-sdk.
 */



/**
 * @addtogroup silsa-x4ucsilsa-ieee802-dot1q-tsn-config-uni Module ieee802-dot1q-tsn-config-uni in Bundle x4ucsilsa
 * @ingroup silsa-x4ucsilsa
 *
 * @{
 *
 * YANG instrumentation library.
 * Generated by yangdump-sdk.
 */



#define y_dot1q_tsn_config_uni_M_dot1q_tsn_config_uni (const xmlChar *)"ieee802-dot1q-tsn-config-uni"

#define y_dot1q_tsn_config_uni_R_dot1q_tsn_config_uni (const xmlChar *)"2022-11-09"

#define y_dot1q_tsn_config_uni_N_accumulated_latency (const xmlChar *)"accumulated-latency"
#define y_dot1q_tsn_config_uni_N_cb_sequence_type_list (const xmlChar *)"cb-sequence-type-list"
#define y_dot1q_tsn_config_uni_N_cb_stream_iden_type_list (const xmlChar *)"cb-stream-iden-type-list"
#define y_dot1q_tsn_config_uni_N_cnc_enabled (const xmlChar *)"cnc-enabled"
#define y_dot1q_tsn_config_uni_N_compute_all_streams (const xmlChar *)"compute_all_streams"
#define y_dot1q_tsn_config_uni_N_compute_planned_and_modified_streams (const xmlChar *)"compute_planned_and_modified_streams"
#define y_dot1q_tsn_config_uni_N_compute_streams (const xmlChar *)"compute_streams"
#define y_dot1q_tsn_config_uni_N_config_list (const xmlChar *)"config-list"
#define y_dot1q_tsn_config_uni_N_config_value (const xmlChar *)"config-value"
#define y_dot1q_tsn_config_uni_N_configure_streams_completed (const xmlChar *)"configure_streams_completed"
#define y_dot1q_tsn_config_uni_N_cuc (const xmlChar *)"cuc"
#define y_dot1q_tsn_config_uni_N_cuc_id (const xmlChar *)"cuc-id"
#define y_dot1q_tsn_config_uni_N_data_frame_specification (const xmlChar *)"data-frame-specification"
#define y_dot1q_tsn_config_uni_N_denominator (const xmlChar *)"denominator"
#define y_dot1q_tsn_config_uni_N_destination_ip_address (const xmlChar *)"destination-ip-address"
#define y_dot1q_tsn_config_uni_N_destination_mac_address (const xmlChar *)"destination-mac-address"
#define y_dot1q_tsn_config_uni_N_destination_port (const xmlChar *)"destination-port"
#define y_dot1q_tsn_config_uni_N_domain (const xmlChar *)"domain"
#define y_dot1q_tsn_config_uni_N_domain_id (const xmlChar *)"domain-id"
#define y_dot1q_tsn_config_uni_N_dscp (const xmlChar *)"dscp"
#define y_dot1q_tsn_config_uni_N_earliest_transmit_offset (const xmlChar *)"earliest-transmit-offset"
#define y_dot1q_tsn_config_uni_N_end_station_interfaces (const xmlChar *)"end-station-interfaces"
#define y_dot1q_tsn_config_uni_N_failed_interfaces (const xmlChar *)"failed-interfaces"
#define y_dot1q_tsn_config_uni_N_failure_code (const xmlChar *)"failure-code"
#define y_dot1q_tsn_config_uni_N_field (const xmlChar *)"field"
#define y_dot1q_tsn_config_uni_N_ieee802_mac_addresses (const xmlChar *)"ieee802-mac-addresses"
#define y_dot1q_tsn_config_uni_N_ieee802_vlan_tag (const xmlChar *)"ieee802-vlan-tag"
#define y_dot1q_tsn_config_uni_N_index (const xmlChar *)"index"
#define y_dot1q_tsn_config_uni_N_interface_capabilities (const xmlChar *)"interface-capabilities"
#define y_dot1q_tsn_config_uni_N_interface_configuration (const xmlChar *)"interface-configuration"
#define y_dot1q_tsn_config_uni_N_interface_list (const xmlChar *)"interface-list"
#define y_dot1q_tsn_config_uni_N_interface_name (const xmlChar *)"interface-name"
#define y_dot1q_tsn_config_uni_N_interval (const xmlChar *)"interval"
#define y_dot1q_tsn_config_uni_N_ipv4_tuple (const xmlChar *)"ipv4-tuple"
#define y_dot1q_tsn_config_uni_N_ipv6_tuple (const xmlChar *)"ipv6-tuple"
#define y_dot1q_tsn_config_uni_N_jitter (const xmlChar *)"jitter"
#define y_dot1q_tsn_config_uni_N_latest_transmit_offset (const xmlChar *)"latest-transmit-offset"
#define y_dot1q_tsn_config_uni_N_listener (const xmlChar *)"listener"
#define y_dot1q_tsn_config_uni_N_listener_status (const xmlChar *)"listener-status"
#define y_dot1q_tsn_config_uni_N_mac_address (const xmlChar *)"mac-address"
#define y_dot1q_tsn_config_uni_N_max_frame_size (const xmlChar *)"max-frame-size"
#define y_dot1q_tsn_config_uni_N_max_frames_per_interval (const xmlChar *)"max-frames-per-interval"
#define y_dot1q_tsn_config_uni_N_max_latency (const xmlChar *)"max-latency"
#define y_dot1q_tsn_config_uni_N_num_seamless_trees (const xmlChar *)"num-seamless-trees"
#define y_dot1q_tsn_config_uni_N_numerator (const xmlChar *)"numerator"
#define y_dot1q_tsn_config_uni_N_priority_code_point (const xmlChar *)"priority-code-point"
#define y_dot1q_tsn_config_uni_N_protocol (const xmlChar *)"protocol"
#define y_dot1q_tsn_config_uni_N_rank (const xmlChar *)"rank"
#define y_dot1q_tsn_config_uni_N_remove_streams (const xmlChar *)"remove_streams"
#define y_dot1q_tsn_config_uni_N_request_domain_id (const xmlChar *)"request_domain_id"
#define y_dot1q_tsn_config_uni_N_request_next_free_stream_id (const xmlChar *)"request_next_free_stream_id"
#define y_dot1q_tsn_config_uni_N_result (const xmlChar *)"result"
#define y_dot1q_tsn_config_uni_N_source_ip_address (const xmlChar *)"source-ip-address"
#define y_dot1q_tsn_config_uni_N_source_mac_address (const xmlChar *)"source-mac-address"
#define y_dot1q_tsn_config_uni_N_source_port (const xmlChar *)"source-port"
#define y_dot1q_tsn_config_uni_N_status_info (const xmlChar *)"status-info"
#define y_dot1q_tsn_config_uni_N_stream (const xmlChar *)"stream"
#define y_dot1q_tsn_config_uni_N_stream_id (const xmlChar *)"stream-id"
#define y_dot1q_tsn_config_uni_N_stream_list (const xmlChar *)"stream-list"
#define y_dot1q_tsn_config_uni_N_stream_rank (const xmlChar *)"stream-rank"
#define y_dot1q_tsn_config_uni_N_stream_status (const xmlChar *)"stream-status"
#define y_dot1q_tsn_config_uni_N_talker (const xmlChar *)"talker"
#define y_dot1q_tsn_config_uni_N_talker_status (const xmlChar *)"talker-status"
#define y_dot1q_tsn_config_uni_N_time_aware (const xmlChar *)"time-aware"
#define y_dot1q_tsn_config_uni_N_time_aware_offset (const xmlChar *)"time-aware-offset"
#define y_dot1q_tsn_config_uni_N_traffic_specification (const xmlChar *)"traffic-specification"
#define y_dot1q_tsn_config_uni_N_transmission_selection (const xmlChar *)"transmission-selection"
#define y_dot1q_tsn_config_uni_N_tsn_uni (const xmlChar *)"tsn-uni"
#define y_dot1q_tsn_config_uni_N_user_to_network_requirements (const xmlChar *)"user-to-network-requirements"
#define y_dot1q_tsn_config_uni_N_vlan_id (const xmlChar *)"vlan-id"
#define y_dot1q_tsn_config_uni_N_vlan_tag_capable (const xmlChar *)"vlan-tag-capable"



/**
 * @brief Phase 1: Initialize the ieee802-dot1q-tsn-config-uni server instrumentation library.
 *
 * Called by server when module is loaded.
 *
 * @param modname requested module name to load
 * @param revision requested revision date of the module to load.
 * This may be NULL if the module has no revision statements.
 * @return return status. An error will cause the module load to fail.
 */
extern status_t y_ieee802_dot1q_tsn_config_uni_init (
    const xmlChar *modname,
    const xmlChar *revision);


/**
 * @brief Phase 2: Initialize the ieee802-dot1q-tsn-config-uni server instrumentation library.
 *
 * SIL init phase 2: non-config data structures.
 * Called after running config is loaded.
 *
 * @return return status. An error will cause the
 * server initialization to fail.
 */
extern status_t y_ieee802_dot1q_tsn_config_uni_init2 (void);


/**
 * @brief Cleanup the ieee802-dot1q-tsn-config-uni server instrumentation library.
 *
 * Called by server when module is unloaded.
 *
 */
extern void y_ieee802_dot1q_tsn_config_uni_cleanup (void);


 /** @} */

#ifdef __cplusplus
} /* end extern 'C' */
#endif

#endif
