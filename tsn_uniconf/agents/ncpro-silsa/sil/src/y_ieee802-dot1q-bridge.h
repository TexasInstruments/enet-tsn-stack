/*
 * Copyright (c) 2023 Texas Instruments Incorporated
 * Copyright (c) 2023 Excelfore Corporation (https://excelfore.com)
 *
 * All rights reserved not granted herein.
 * Limited License.
 *
 * Texas Instruments Incorporated grants a world-wide, royalty-free,
 * non-exclusive license under copyrights and patents it now or hereafter
 * owns or controls to make, have made, use, import, offer to sell and sell ("Utilize")
 * this software subject to the terms herein. With respect to the foregoing patent
 * license, such license is granted solely to the extent that any such patent is necessary
 * to Utilize the software alone. The patent license shall not apply to any combinations which
 * include this software, other than combinations with devices manufactured by or for TI ("TI Devices").
 * No hardware patent is licensed hereunder.
 *
 * Redistributions must preserve existing copyright notices and reproduce this license (including the
 * above copyright notice and the disclaimer and (if applicable) source code license limitations below)
 * in the documentation and/or other materials provided with the distribution
 *
 * Redistribution and use in binary form, without modification, are permitted provided that the following
 * conditions are met:
 *
 * * No reverse engineering, decompilation, or disassembly of this software is permitted with respect to any
 * software provided in binary form.
 * * any redistribution and use are licensed by TI for use only with TI Devices.
 * * Nothing shall obligate TI to provide you with source code for the software licensed and provided to you in object code.
 *
 * If software source code is provided to you, modification and redistribution of the source code are permitted
 * provided that the following conditions are met:
 *
 * * any redistribution and use of the source code, including any resulting derivative works, are licensed by
 * TI for use only with TI Devices.
 * * any redistribution and use of any object code compiled from the source code and any resulting derivative
 * works, are licensed by TI for use only with TI Devices.
 *
 * Neither the name of Texas Instruments Incorporated nor the names of its suppliers may be used to endorse or
 * promote products derived from this software without specific prior written permission.
 *
 * DISCLAIMER.
 *
 * THIS SOFTWARE IS PROVIDED BY TI AND TI"S LICENSORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL TI AND TI"S LICENSORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
*/

#ifndef _H_y_ieee802_dot1q_bridge
#define _H_y_ieee802_dot1q_bridge
/*
 * Copyright (c) 2008 - 2012, Andy Bierman, All Rights Reserved.
 * Copyright (c) 2012 - 2022, YumaWorks, Inc., All Rights Reserved.
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 */

/**
 * @file y_ieee802-dot1q-bridge.h
 * @brief YumaPro SIL-SA header for module ieee802-dot1q-bridge
 *

*** Generated by yangdump-sdk 21.10-12

<pre>

    YumaPro SIL-SA header
    bundle x4ucsilsa
    module ieee802-dot1q-bridge
    revision 2022-10-29
    prefix dot1q
    namespace urn:ieee:std:802.1Q:yang:ieee802-dot1q-bridge
    organization IEEE 802.1 Working Group
    Created: 2023-03-29T06:45:58Z

Online Developer Manual:
https://www.yumaworks.com/pub/21.10/dev/yumapro-dev-manual.html

    CLI parameters:
        defnames true
        deviation excelfore-interfaces
        deviation excelfore-gptp
        format yh
        indent 4
        module ietf-interfaces
        module ieee802-dot1q-bridge
        module ieee802-dot1q-tsn-config-uni
        module excelfore-interfaces
        module ieee1588-ptp
        module ieee802-dot1as-ptp
        module excelfore-gptp
        sil-bundle x4ucsilsa
        sil-edit2
        sil-get2
        sil-include tsn_uniconf/yangs/yang_db_access.h
        sil-include tsn_uniconf/yangs/yang_modules.h
        sil-sa
        unified true
</pre>

 */

#include <xmlstring.h>

#include "procdefs.h"
#include "dlq.h"
#include "ncxtypes.h"
#include "op.h"
#include "status.h"
#include "val.h"

#ifdef __cplusplus
extern "C" {
#endif

/**
 * @addtogroup yang-library YANG Library
 *
 * Collection of modules supported by the server.
 * Generated by yangdump-sdk.
 */



/**
 * @addtogroup silsa-x4ucsilsa-ieee802-dot1q-bridge Module ieee802-dot1q-bridge in Bundle x4ucsilsa
 * @ingroup silsa-x4ucsilsa
 *
 * @{
 *
 * YANG instrumentation library.
 * Generated by yangdump-sdk.
 */



#define y_dot1q_M_dot1q (const xmlChar *)"ieee802-dot1q-bridge"

#define y_dot1q_R_dot1q (const xmlChar *)"2022-10-29"

#define y_dot1q_I_type_of_bridge (const xmlChar *)"type-of-bridge"
#define y_dot1q_I_customer_vlan_bridge (const xmlChar *)"customer-vlan-bridge"
#define y_dot1q_I_provider_bridge (const xmlChar *)"provider-bridge"
#define y_dot1q_I_provider_edge_bridge (const xmlChar *)"provider-edge-bridge"
#define y_dot1q_I_two_port_mac_relay_bridge (const xmlChar *)"two-port-mac-relay-bridge"
#define y_dot1q_I_type_of_component (const xmlChar *)"type-of-component"
#define y_dot1q_I_c_vlan_component (const xmlChar *)"c-vlan-component"
#define y_dot1q_I_s_vlan_component (const xmlChar *)"s-vlan-component"
#define y_dot1q_I_d_bridge_component (const xmlChar *)"d-bridge-component"
#define y_dot1q_I_edge_relay_component (const xmlChar *)"edge-relay-component"
#define y_dot1q_I_type_of_port (const xmlChar *)"type-of-port"
#define y_dot1q_I_c_vlan_bridge_port (const xmlChar *)"c-vlan-bridge-port"
#define y_dot1q_I_provider_network_port (const xmlChar *)"provider-network-port"
#define y_dot1q_I_customer_network_port (const xmlChar *)"customer-network-port"
#define y_dot1q_I_customer_edge_port (const xmlChar *)"customer-edge-port"
#define y_dot1q_I_d_bridge_port (const xmlChar *)"d-bridge-port"
#define y_dot1q_I_remote_customer_access_port (const xmlChar *)"remote-customer-access-port"
#define y_dot1q_I_bridge_interface (const xmlChar *)"bridge-interface"

#define y_dot1q_N_address (const xmlChar *)"address"
#define y_dot1q_N_aging_time (const xmlChar *)"aging-time"
#define y_dot1q_N_allocation_type (const xmlChar *)"allocation-type"
#define y_dot1q_N_bridge (const xmlChar *)"bridge"
#define y_dot1q_N_bridge_mst (const xmlChar *)"bridge-mst"
#define y_dot1q_N_bridge_port (const xmlChar *)"bridge-port"
#define y_dot1q_N_bridge_type (const xmlChar *)"bridge-type"
#define y_dot1q_N_bridge_vlan (const xmlChar *)"bridge-vlan"
#define y_dot1q_N_bridges (const xmlChar *)"bridges"
#define y_dot1q_N_capabilities (const xmlChar *)"capabilities"
#define y_dot1q_N_component (const xmlChar *)"component"
#define y_dot1q_N_component_name (const xmlChar *)"component-name"
#define y_dot1q_N_components (const xmlChar *)"components"
#define y_dot1q_N_configurable_pvid_tagging (const xmlChar *)"configurable-pvid-tagging"
#define y_dot1q_N_connection_identifier (const xmlChar *)"connection-identifier"
#define y_dot1q_N_control_element (const xmlChar *)"control-element"
#define y_dot1q_N_database_id (const xmlChar *)"database-id"
#define y_dot1q_N_db_index (const xmlChar *)"db-index"
#define y_dot1q_N_default_priority (const xmlChar *)"default-priority"
#define y_dot1q_N_dsap_ssap_pairs (const xmlChar *)"dsap-ssap-pairs"
#define y_dot1q_N_dynamic_entries (const xmlChar *)"dynamic-entries"
#define y_dot1q_N_dynamic_filtering_entries (const xmlChar *)"dynamic-filtering-entries"
#define y_dot1q_N_dynamic_reservation_entries (const xmlChar *)"dynamic-reservation-entries"
#define y_dot1q_N_dynamic_vlan_registration_entries (const xmlChar *)"dynamic-vlan-registration-entries"
#define y_dot1q_N_egress_ports (const xmlChar *)"egress-ports"
#define y_dot1q_N_entry_type (const xmlChar *)"entry-type"
#define y_dot1q_N_ethernet_rfc1042_snap8021H (const xmlChar *)"ethernet-rfc1042-snap8021H"
#define y_dot1q_N_ethertype (const xmlChar *)"ethertype"
#define y_dot1q_N_extended_filtering (const xmlChar *)"extended-filtering"
#define y_dot1q_N_fid (const xmlChar *)"fid"
#define y_dot1q_N_fid_to_mstid (const xmlChar *)"fid-to-mstid"
#define y_dot1q_N_fid_to_mstid_allocation (const xmlChar *)"fid-to-mstid-allocation"
#define y_dot1q_N_fid_to_vid_allocation (const xmlChar *)"fid-to-vid-allocation"
#define y_dot1q_N_fids (const xmlChar *)"fids"
#define y_dot1q_N_filtering_database (const xmlChar *)"filtering-database"
#define y_dot1q_N_filtering_entry (const xmlChar *)"filtering-entry"
#define y_dot1q_N_frame_format (const xmlChar *)"frame-format"
#define y_dot1q_N_frame_format_type (const xmlChar *)"frame-format-type"
#define y_dot1q_N_group_id (const xmlChar *)"group-id"
#define y_dot1q_N_hybrid_capable (const xmlChar *)"hybrid-capable"
#define y_dot1q_N_id (const xmlChar *)"id"
#define y_dot1q_N_ivl_capable (const xmlChar *)"ivl-capable"
#define y_dot1q_N_llc_address (const xmlChar *)"llc-address"
#define y_dot1q_N_llc_other (const xmlChar *)"llc-other"
#define y_dot1q_N_local_vlan_capable (const xmlChar *)"local-vlan-capable"
#define y_dot1q_N_mac_address_registration_entries (const xmlChar *)"mac-address-registration-entries"
#define y_dot1q_N_map_type (const xmlChar *)"map-type"
#define y_dot1q_N_max_msti (const xmlChar *)"max-msti"
#define y_dot1q_N_max_vids (const xmlChar *)"max-vids"
#define y_dot1q_N_mstid (const xmlChar *)"mstid"
#define y_dot1q_N_name (const xmlChar *)"name"
#define y_dot1q_N_override_default_pvid (const xmlChar *)"override-default-pvid"
#define y_dot1q_N_permanent_database (const xmlChar *)"permanent-database"
#define y_dot1q_N_port_map (const xmlChar *)"port-map"
#define y_dot1q_N_port_ref (const xmlChar *)"port-ref"
#define y_dot1q_N_ports (const xmlChar *)"ports"
#define y_dot1q_N_priority0 (const xmlChar *)"priority0"
#define y_dot1q_N_priority1 (const xmlChar *)"priority1"
#define y_dot1q_N_priority2 (const xmlChar *)"priority2"
#define y_dot1q_N_priority3 (const xmlChar *)"priority3"
#define y_dot1q_N_priority4 (const xmlChar *)"priority4"
#define y_dot1q_N_priority5 (const xmlChar *)"priority5"
#define y_dot1q_N_priority6 (const xmlChar *)"priority6"
#define y_dot1q_N_priority7 (const xmlChar *)"priority7"
#define y_dot1q_N_priority_regeneration (const xmlChar *)"priority-regeneration"
#define y_dot1q_N_protocol_group_database (const xmlChar *)"protocol-group-database"
#define y_dot1q_N_protocol_id (const xmlChar *)"protocol-id"
#define y_dot1q_N_protocol_template (const xmlChar *)"protocol-template"
#define y_dot1q_N_pvid (const xmlChar *)"pvid"
#define y_dot1q_N_registrar_admin_control (const xmlChar *)"registrar-admin-control"
#define y_dot1q_N_size (const xmlChar *)"size"
#define y_dot1q_N_snap_other (const xmlChar *)"snap-other"
#define y_dot1q_N_static_entries (const xmlChar *)"static-entries"
#define y_dot1q_N_static_entry_individual_port (const xmlChar *)"static-entry-individual-port"
#define y_dot1q_N_static_filtering_entries (const xmlChar *)"static-filtering-entries"
#define y_dot1q_N_static_vlan_registration_entries (const xmlChar *)"static-vlan-registration-entries"
#define y_dot1q_N_status (const xmlChar *)"status"
#define y_dot1q_N_svl_capable (const xmlChar *)"svl-capable"
#define y_dot1q_N_traffic_class (const xmlChar *)"traffic-class"
#define y_dot1q_N_traffic_class_enabled (const xmlChar *)"traffic-class-enabled"
#define y_dot1q_N_traffic_classes (const xmlChar *)"traffic-classes"
#define y_dot1q_N_transmission_selection_algorithm (const xmlChar *)"transmission-selection-algorithm"
#define y_dot1q_N_transmission_selection_algorithm_map (const xmlChar *)"transmission-selection-algorithm-map"
#define y_dot1q_N_transmission_selection_algorithm_table (const xmlChar *)"transmission-selection-algorithm-table"
#define y_dot1q_N_type (const xmlChar *)"type"
#define y_dot1q_N_untagged_ports (const xmlChar *)"untagged-ports"
#define y_dot1q_N_up_time (const xmlChar *)"up-time"
#define y_dot1q_N_version (const xmlChar *)"version"
#define y_dot1q_N_vid (const xmlChar *)"vid"
#define y_dot1q_N_vid_to_fid (const xmlChar *)"vid-to-fid"
#define y_dot1q_N_vid_to_fid_allocation (const xmlChar *)"vid-to-fid-allocation"
#define y_dot1q_N_vids (const xmlChar *)"vids"
#define y_dot1q_N_vlan (const xmlChar *)"vlan"
#define y_dot1q_N_vlan_registration_entry (const xmlChar *)"vlan-registration-entry"
#define y_dot1q_N_vlan_transmitted (const xmlChar *)"vlan-transmitted"



/**
 * @brief Phase 1: Initialize the ieee802-dot1q-bridge server instrumentation library.
 *
 * Called by server when module is loaded.
 *
 * @param modname requested module name to load
 * @param revision requested revision date of the module to load.
 * This may be NULL if the module has no revision statements.
 * @return return status. An error will cause the module load to fail.
 */
extern status_t y_ieee802_dot1q_bridge_init (
    const xmlChar *modname,
    const xmlChar *revision);


/**
 * @brief Phase 2: Initialize the ieee802-dot1q-bridge server instrumentation library.
 *
 * SIL init phase 2: non-config data structures.
 * Called after running config is loaded.
 *
 * @return return status. An error will cause the
 * server initialization to fail.
 */
extern status_t y_ieee802_dot1q_bridge_init2 (void);


/**
 * @brief Cleanup the ieee802-dot1q-bridge server instrumentation library.
 *
 * Called by server when module is unloaded.
 *
 */
extern void y_ieee802_dot1q_bridge_cleanup (void);


 /** @} */

#ifdef __cplusplus
} /* end extern 'C' */
#endif

#endif
