/*
 * Copyright (c) 2023 Texas Instruments Incorporated
 * Copyright (c) 2023 Excelfore Corporation (https://excelfore.com)
 *
 * All rights reserved not granted herein.
 * Limited License.
 *
 * Texas Instruments Incorporated grants a world-wide, royalty-free,
 * non-exclusive license under copyrights and patents it now or hereafter
 * owns or controls to make, have made, use, import, offer to sell and sell ("Utilize")
 * this software subject to the terms herein. With respect to the foregoing patent
 * license, such license is granted solely to the extent that any such patent is necessary
 * to Utilize the software alone. The patent license shall not apply to any combinations which
 * include this software, other than combinations with devices manufactured by or for TI ("TI Devices").
 * No hardware patent is licensed hereunder.
 *
 * Redistributions must preserve existing copyright notices and reproduce this license (including the
 * above copyright notice and the disclaimer and (if applicable) source code license limitations below)
 * in the documentation and/or other materials provided with the distribution
 *
 * Redistribution and use in binary form, without modification, are permitted provided that the following
 * conditions are met:
 *
 * * No reverse engineering, decompilation, or disassembly of this software is permitted with respect to any
 * software provided in binary form.
 * * any redistribution and use are licensed by TI for use only with TI Devices.
 * * Nothing shall obligate TI to provide you with source code for the software licensed and provided to you in object code.
 *
 * If software source code is provided to you, modification and redistribution of the source code are permitted
 * provided that the following conditions are met:
 *
 * * any redistribution and use of the source code, including any resulting derivative works, are licensed by
 * TI for use only with TI Devices.
 * * any redistribution and use of any object code compiled from the source code and any resulting derivative
 * works, are licensed by TI for use only with TI Devices.
 *
 * Neither the name of Texas Instruments Incorporated nor the names of its suppliers may be used to endorse or
 * promote products derived from this software without specific prior written permission.
 *
 * DISCLAIMER.
 *
 * THIS SOFTWARE IS PROVIDED BY TI AND TI"S LICENSORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL TI AND TI"S LICENSORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
*/

#ifndef _H_u_ieee802_dot1q_bridge
#define _H_u_ieee802_dot1q_bridge
/*
 * Copyright (c) 2008 - 2012, Andy Bierman, All Rights Reserved.
 * Copyright (c) 2012 - 2022, YumaWorks, Inc., All Rights Reserved.
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 */

/**
 * @file u_ieee802-dot1q-bridge.h
 * @brief User SIL-SA header for module ieee802-dot1q-bridge
 *

*** Generated by yangdump-sdk 21.10-12

<pre>

    User SIL-SA header
    bundle x4ucsilsa
    module ieee802-dot1q-bridge
    revision 2022-10-29
    prefix dot1q
    namespace urn:ieee:std:802.1Q:yang:ieee802-dot1q-bridge
    organization IEEE 802.1 Working Group
    Created: 2023-03-29T06:45:58Z

Online Developer Manual:
https://www.yumaworks.com/pub/21.10/dev/yumapro-dev-manual.html

    CLI parameters:
        defnames true
        deviation excelfore-interfaces
        deviation excelfore-gptp
        format uh
        indent 4
        module ietf-interfaces
        module ieee802-dot1q-bridge
        module ieee802-dot1q-tsn-config-uni
        module excelfore-interfaces
        module ieee1588-ptp
        module ieee802-dot1as-ptp
        module excelfore-gptp
        sil-bundle x4ucsilsa
        sil-edit2
        sil-get2
        sil-include tsn_uniconf/yangs/yang_db_access.h
        sil-include tsn_uniconf/yangs/yang_modules.h
        sil-sa
        unified true
</pre>

 */


/* Feature ieee802-dot1q-bridge:ingress-filtering
 * Comment out #define to disable */
#define u_dot1q_F_ingress_filtering 1

/* Feature ieee802-dot1q-bridge:extended-filtering-services
 * Comment out #define to disable */
#define u_dot1q_F_extended_filtering_services 1

/* Feature ieee802-dot1q-bridge:port-and-protocol-based-vlan
 * Comment out #define to disable */
#define u_dot1q_F_port_and_protocol_based_vlan 1

/* Feature ieee802-dot1q-bridge:flow-filtering
 * Comment out #define to disable */
#define u_dot1q_F_flow_filtering 1

/* Feature ieee802-dot1q-bridge:simple-bridge-port
 * Comment out #define to disable */
#define u_dot1q_F_simple_bridge_port 1

/* Feature ieee802-dot1q-bridge:flexible-bridge-port
 * Comment out #define to disable */
#define u_dot1q_F_flexible_bridge_port 1

#include <xmlstring.h>

#include "procdefs.h"
#include "agt.h"
#include "agt_cb.h"
#include "dlq.h"
#include "ncxtypes.h"
#include "op.h"
#include "rpc.h"
#include "ses.h"
#include "status.h"
#include "val.h"
#include "y_ieee802-dot1q-bridge.h"
#include "u_ietf-interfaces.h"
#include "u_ieee802-dot1q-tsn-config-uni.h"
#include "u_excelfore-interfaces.h"
#include "u_ieee1588-ptp.h"
#include "u_ieee802-dot1as-ptp.h"
#include "u_excelfore-gptp.h"

#ifdef __cplusplus
extern "C" {
#endif

/**
 * @addtogroup yang-library YANG Library
 *
 * Collection of modules supported by the server.
 * Generated by yangdump-sdk.
 */



/**
 * @addtogroup silsa-x4ucsilsa-ieee802-dot1q-bridge Module ieee802-dot1q-bridge in Bundle x4ucsilsa
 * @ingroup silsa-x4ucsilsa
 *
 * @{
 *
 * YANG instrumentation library.
 * Generated by yangdump-sdk.
 */



/* container /interfaces/interface/bridge-port/priority-regeneration */
typedef struct y_dot1q_T_priority_regeneration_ {
    uint8 v_priority0;
    uint8 v_priority1;
    uint8 v_priority2;
    uint8 v_priority3;
    uint8 v_priority4;
    uint8 v_priority5;
    uint8 v_priority6;
    uint8 v_priority7;
} y_dot1q_T_priority_regeneration;

/* container /interfaces/interface/bridge-port/traffic-class */
typedef struct y_dot1q_T_traffic_class_ {
} y_dot1q_T_traffic_class;

/* list /interfaces/interface/bridge-port/transmission-selection-algorithm-table/transmission-selection-algorithm-map */
typedef struct y_dot1q_T_transmission_selection_algorithm_map_ {
    dlq_hdr_t qhdr;
    uint8 v_traffic_class;
    val_idref_t *v_transmission_selection_algorithm;
} y_dot1q_T_transmission_selection_algorithm_map;

/* container /interfaces/interface/bridge-port/transmission-selection-algorithm-table */
typedef struct y_dot1q_T_transmission_selection_algorithm_table_ {
    dlq_hdr_t v_transmission_selection_algorithm_map;
} y_dot1q_T_transmission_selection_algorithm_table;

/* container /interfaces/interface/bridge-port */
typedef struct y_dot1q_T_bridge_port_ {
    xmlChar *v_component_name;
    uint32 v_pvid;
    uint8 v_default_priority;
    y_dot1q_T_priority_regeneration v_priority_regeneration;
    y_dot1q_T_traffic_class v_traffic_class;
    y_dot1q_T_transmission_selection_algorithm_table v_transmission_selection_algorithm_table;
    xmlChar *v_address;
} y_dot1q_T_bridge_port;

/* leaf-list /bridges/bridge/component/bridge-port */
typedef struct y_dot1q_T_bridge_port_1_ {
    dlq_hdr_t qhdr;
    xmlChar *v_bridge_port;
} y_dot1q_T_bridge_port_1;

/* container /bridges/bridge/component/capabilities */
typedef struct y_dot1q_T_capabilities_1_ {
    boolean v_extended_filtering;
    boolean v_traffic_classes;
    boolean v_static_entry_individual_port;
    boolean v_ivl_capable;
    boolean v_svl_capable;
    boolean v_hybrid_capable;
    boolean v_configurable_pvid_tagging;
    boolean v_local_vlan_capable;
} y_dot1q_T_capabilities_1;

/* container /bridges/bridge/component/filtering-database/filtering-entry/port-map/map-type/static-filtering-entries/static-filtering-entries */
typedef struct y_dot1q_T_static_filtering_entries_1_ {
    xmlChar *v_control_element;
    uint32 v_connection_identifier;
} y_dot1q_T_static_filtering_entries_1;

/* case /bridges/bridge/component/filtering-database/filtering-entry/port-map/map-type/static-filtering-entries */
typedef struct y_dot1q_T_static_filtering_entries_ {
    y_dot1q_T_static_filtering_entries_1 v_static_filtering_entries;
} y_dot1q_T_static_filtering_entries;

/* container /bridges/bridge/component/filtering-database/filtering-entry/port-map/map-type/static-vlan-registration-entries/static-vlan-registration-entries */
typedef struct y_dot1q_T_static_vlan_registration_entries_2_ {
    xmlChar *v_registrar_admin_control;
    xmlChar *v_vlan_transmitted;
} y_dot1q_T_static_vlan_registration_entries_2;

/* case /bridges/bridge/component/filtering-database/filtering-entry/port-map/map-type/static-vlan-registration-entries */
typedef struct y_dot1q_T_static_vlan_registration_entries_1_ {
    y_dot1q_T_static_vlan_registration_entries_2 v_static_vlan_registration_entries;
} y_dot1q_T_static_vlan_registration_entries_1;

/* container /bridges/bridge/component/filtering-database/filtering-entry/port-map/map-type/mac-address-registration-entries/mac-address-registration-entries */
typedef struct y_dot1q_T_mac_address_registration_entries_2_ {
    xmlChar *v_control_element;
} y_dot1q_T_mac_address_registration_entries_2;

/* case /bridges/bridge/component/filtering-database/filtering-entry/port-map/map-type/mac-address-registration-entries */
typedef struct y_dot1q_T_mac_address_registration_entries_1_ {
    y_dot1q_T_mac_address_registration_entries_2 v_mac_address_registration_entries;
} y_dot1q_T_mac_address_registration_entries_1;

/* container /bridges/bridge/component/filtering-database/filtering-entry/port-map/map-type/dynamic-vlan-registration-entries/dynamic-vlan-registration-entries */
typedef struct y_dot1q_T_dynamic_vlan_registration_entries_2_ {
    xmlChar *v_control_element;
} y_dot1q_T_dynamic_vlan_registration_entries_2;

/* case /bridges/bridge/component/filtering-database/filtering-entry/port-map/map-type/dynamic-vlan-registration-entries */
typedef struct y_dot1q_T_dynamic_vlan_registration_entries_1_ {
    y_dot1q_T_dynamic_vlan_registration_entries_2 v_dynamic_vlan_registration_entries;
} y_dot1q_T_dynamic_vlan_registration_entries_1;

/* container /bridges/bridge/component/filtering-database/filtering-entry/port-map/map-type/dynamic-reservation-entries/dynamic-reservation-entries */
typedef struct y_dot1q_T_dynamic_reservation_entries_1_ {
    xmlChar *v_control_element;
} y_dot1q_T_dynamic_reservation_entries_1;

/* case /bridges/bridge/component/filtering-database/filtering-entry/port-map/map-type/dynamic-reservation-entries */
typedef struct y_dot1q_T_dynamic_reservation_entries_ {
    y_dot1q_T_dynamic_reservation_entries_1 v_dynamic_reservation_entries;
} y_dot1q_T_dynamic_reservation_entries;

/* container /bridges/bridge/component/filtering-database/filtering-entry/port-map/map-type/dynamic-filtering-entries/dynamic-filtering-entries */
typedef struct y_dot1q_T_dynamic_filtering_entries_1_ {
    xmlChar *v_control_element;
} y_dot1q_T_dynamic_filtering_entries_1;

/* case /bridges/bridge/component/filtering-database/filtering-entry/port-map/map-type/dynamic-filtering-entries */
typedef struct y_dot1q_T_dynamic_filtering_entries_ {
    y_dot1q_T_dynamic_filtering_entries_1 v_dynamic_filtering_entries;
} y_dot1q_T_dynamic_filtering_entries;

/* choice /bridges/bridge/component/filtering-database/filtering-entry/port-map/map-type */
typedef union y_dot1q_T_map_type_ {
    y_dot1q_T_static_filtering_entries v_static_filtering_entries;
    y_dot1q_T_static_vlan_registration_entries_1 v_static_vlan_registration_entries;
    y_dot1q_T_mac_address_registration_entries_1 v_mac_address_registration_entries;
    y_dot1q_T_dynamic_vlan_registration_entries_1 v_dynamic_vlan_registration_entries;
    y_dot1q_T_dynamic_reservation_entries v_dynamic_reservation_entries;
    y_dot1q_T_dynamic_filtering_entries v_dynamic_filtering_entries;
} y_dot1q_T_map_type;

/* list /bridges/bridge/component/filtering-database/filtering-entry/port-map */
typedef struct y_dot1q_T_port_map_ {
    dlq_hdr_t qhdr;
    uint32 v_port_ref;
    y_dot1q_T_map_type v_map_type;
} y_dot1q_T_port_map;

/* list /bridges/bridge/component/filtering-database/filtering-entry */
typedef struct y_dot1q_T_filtering_entry_ {
    dlq_hdr_t qhdr;
    uint32 v_database_id;
    xmlChar *v_address;
    xmlChar *v_vids;
    xmlChar *v_entry_type;
    dlq_hdr_t v_port_map;
    xmlChar *v_status;
} y_dot1q_T_filtering_entry;

/* container /bridges/bridge/component/filtering-database/vlan-registration-entry/port-map/map-type/static-filtering-entries/static-filtering-entries */
typedef struct y_dot1q_T_static_filtering_entries_3_ {
    xmlChar *v_control_element;
    uint32 v_connection_identifier;
} y_dot1q_T_static_filtering_entries_3;

/* case /bridges/bridge/component/filtering-database/vlan-registration-entry/port-map/map-type/static-filtering-entries */
typedef struct y_dot1q_T_static_filtering_entries_2_ {
    y_dot1q_T_static_filtering_entries_3 v_static_filtering_entries;
} y_dot1q_T_static_filtering_entries_2;

/* container /bridges/bridge/component/filtering-database/vlan-registration-entry/port-map/map-type/static-vlan-registration-entries/static-vlan-registration-entries */
typedef struct y_dot1q_T_static_vlan_registration_entries_4_ {
    xmlChar *v_registrar_admin_control;
    xmlChar *v_vlan_transmitted;
} y_dot1q_T_static_vlan_registration_entries_4;

/* case /bridges/bridge/component/filtering-database/vlan-registration-entry/port-map/map-type/static-vlan-registration-entries */
typedef struct y_dot1q_T_static_vlan_registration_entries_3_ {
    y_dot1q_T_static_vlan_registration_entries_4 v_static_vlan_registration_entries;
} y_dot1q_T_static_vlan_registration_entries_3;

/* container /bridges/bridge/component/filtering-database/vlan-registration-entry/port-map/map-type/mac-address-registration-entries/mac-address-registration-entries */
typedef struct y_dot1q_T_mac_address_registration_entries_4_ {
    xmlChar *v_control_element;
} y_dot1q_T_mac_address_registration_entries_4;

/* case /bridges/bridge/component/filtering-database/vlan-registration-entry/port-map/map-type/mac-address-registration-entries */
typedef struct y_dot1q_T_mac_address_registration_entries_3_ {
    y_dot1q_T_mac_address_registration_entries_4 v_mac_address_registration_entries;
} y_dot1q_T_mac_address_registration_entries_3;

/* container /bridges/bridge/component/filtering-database/vlan-registration-entry/port-map/map-type/dynamic-vlan-registration-entries/dynamic-vlan-registration-entries */
typedef struct y_dot1q_T_dynamic_vlan_registration_entries_4_ {
    xmlChar *v_control_element;
} y_dot1q_T_dynamic_vlan_registration_entries_4;

/* case /bridges/bridge/component/filtering-database/vlan-registration-entry/port-map/map-type/dynamic-vlan-registration-entries */
typedef struct y_dot1q_T_dynamic_vlan_registration_entries_3_ {
    y_dot1q_T_dynamic_vlan_registration_entries_4 v_dynamic_vlan_registration_entries;
} y_dot1q_T_dynamic_vlan_registration_entries_3;

/* container /bridges/bridge/component/filtering-database/vlan-registration-entry/port-map/map-type/dynamic-reservation-entries/dynamic-reservation-entries */
typedef struct y_dot1q_T_dynamic_reservation_entries_3_ {
    xmlChar *v_control_element;
} y_dot1q_T_dynamic_reservation_entries_3;

/* case /bridges/bridge/component/filtering-database/vlan-registration-entry/port-map/map-type/dynamic-reservation-entries */
typedef struct y_dot1q_T_dynamic_reservation_entries_2_ {
    y_dot1q_T_dynamic_reservation_entries_3 v_dynamic_reservation_entries;
} y_dot1q_T_dynamic_reservation_entries_2;

/* container /bridges/bridge/component/filtering-database/vlan-registration-entry/port-map/map-type/dynamic-filtering-entries/dynamic-filtering-entries */
typedef struct y_dot1q_T_dynamic_filtering_entries_3_ {
    xmlChar *v_control_element;
} y_dot1q_T_dynamic_filtering_entries_3;

/* case /bridges/bridge/component/filtering-database/vlan-registration-entry/port-map/map-type/dynamic-filtering-entries */
typedef struct y_dot1q_T_dynamic_filtering_entries_2_ {
    y_dot1q_T_dynamic_filtering_entries_3 v_dynamic_filtering_entries;
} y_dot1q_T_dynamic_filtering_entries_2;

/* choice /bridges/bridge/component/filtering-database/vlan-registration-entry/port-map/map-type */
typedef union y_dot1q_T_map_type_1_ {
    y_dot1q_T_static_filtering_entries_2 v_static_filtering_entries;
    y_dot1q_T_static_vlan_registration_entries_3 v_static_vlan_registration_entries;
    y_dot1q_T_mac_address_registration_entries_3 v_mac_address_registration_entries;
    y_dot1q_T_dynamic_vlan_registration_entries_3 v_dynamic_vlan_registration_entries;
    y_dot1q_T_dynamic_reservation_entries_2 v_dynamic_reservation_entries;
    y_dot1q_T_dynamic_filtering_entries_2 v_dynamic_filtering_entries;
} y_dot1q_T_map_type_1;

/* list /bridges/bridge/component/filtering-database/vlan-registration-entry/port-map */
typedef struct y_dot1q_T_port_map_1_ {
    dlq_hdr_t qhdr;
    uint32 v_port_ref;
    y_dot1q_T_map_type_1 v_map_type;
} y_dot1q_T_port_map_1;

/* list /bridges/bridge/component/filtering-database/vlan-registration-entry */
typedef struct y_dot1q_T_vlan_registration_entry_ {
    dlq_hdr_t qhdr;
    uint32 v_database_id;
    xmlChar *v_vids;
    xmlChar *v_entry_type;
    dlq_hdr_t v_port_map;
} y_dot1q_T_vlan_registration_entry;

/* container /bridges/bridge/component/filtering-database */
typedef struct y_dot1q_T_filtering_database_ {
    uint32 v_aging_time;
    uint32 v_size;
    uint32 v_static_entries;
    uint32 v_dynamic_entries;
    uint32 v_static_vlan_registration_entries;
    uint32 v_dynamic_vlan_registration_entries;

#ifdef u_dot1q_F_extended_filtering_services
    uint32 v_mac_address_registration_entries;
#endif /* u_dot1q_F_extended_filtering_services */
    dlq_hdr_t v_filtering_entry;
    dlq_hdr_t v_vlan_registration_entry;
} y_dot1q_T_filtering_database;

/* container /bridges/bridge/component/permanent-database/filtering-entry/port-map/map-type/static-filtering-entries/static-filtering-entries */
typedef struct y_dot1q_T_static_filtering_entries_5_ {
    xmlChar *v_control_element;
    uint32 v_connection_identifier;
} y_dot1q_T_static_filtering_entries_5;

/* case /bridges/bridge/component/permanent-database/filtering-entry/port-map/map-type/static-filtering-entries */
typedef struct y_dot1q_T_static_filtering_entries_4_ {
    y_dot1q_T_static_filtering_entries_5 v_static_filtering_entries;
} y_dot1q_T_static_filtering_entries_4;

/* container /bridges/bridge/component/permanent-database/filtering-entry/port-map/map-type/static-vlan-registration-entries/static-vlan-registration-entries */
typedef struct y_dot1q_T_static_vlan_registration_entries_7_ {
    xmlChar *v_registrar_admin_control;
    xmlChar *v_vlan_transmitted;
} y_dot1q_T_static_vlan_registration_entries_7;

/* case /bridges/bridge/component/permanent-database/filtering-entry/port-map/map-type/static-vlan-registration-entries */
typedef struct y_dot1q_T_static_vlan_registration_entries_6_ {
    y_dot1q_T_static_vlan_registration_entries_7 v_static_vlan_registration_entries;
} y_dot1q_T_static_vlan_registration_entries_6;

/* container /bridges/bridge/component/permanent-database/filtering-entry/port-map/map-type/mac-address-registration-entries/mac-address-registration-entries */
typedef struct y_dot1q_T_mac_address_registration_entries_6_ {
    xmlChar *v_control_element;
} y_dot1q_T_mac_address_registration_entries_6;

/* case /bridges/bridge/component/permanent-database/filtering-entry/port-map/map-type/mac-address-registration-entries */
typedef struct y_dot1q_T_mac_address_registration_entries_5_ {
    y_dot1q_T_mac_address_registration_entries_6 v_mac_address_registration_entries;
} y_dot1q_T_mac_address_registration_entries_5;

/* container /bridges/bridge/component/permanent-database/filtering-entry/port-map/map-type/dynamic-vlan-registration-entries/dynamic-vlan-registration-entries */
typedef struct y_dot1q_T_dynamic_vlan_registration_entries_6_ {
    xmlChar *v_control_element;
} y_dot1q_T_dynamic_vlan_registration_entries_6;

/* case /bridges/bridge/component/permanent-database/filtering-entry/port-map/map-type/dynamic-vlan-registration-entries */
typedef struct y_dot1q_T_dynamic_vlan_registration_entries_5_ {
    y_dot1q_T_dynamic_vlan_registration_entries_6 v_dynamic_vlan_registration_entries;
} y_dot1q_T_dynamic_vlan_registration_entries_5;

/* container /bridges/bridge/component/permanent-database/filtering-entry/port-map/map-type/dynamic-reservation-entries/dynamic-reservation-entries */
typedef struct y_dot1q_T_dynamic_reservation_entries_5_ {
    xmlChar *v_control_element;
} y_dot1q_T_dynamic_reservation_entries_5;

/* case /bridges/bridge/component/permanent-database/filtering-entry/port-map/map-type/dynamic-reservation-entries */
typedef struct y_dot1q_T_dynamic_reservation_entries_4_ {
    y_dot1q_T_dynamic_reservation_entries_5 v_dynamic_reservation_entries;
} y_dot1q_T_dynamic_reservation_entries_4;

/* container /bridges/bridge/component/permanent-database/filtering-entry/port-map/map-type/dynamic-filtering-entries/dynamic-filtering-entries */
typedef struct y_dot1q_T_dynamic_filtering_entries_5_ {
    xmlChar *v_control_element;
} y_dot1q_T_dynamic_filtering_entries_5;

/* case /bridges/bridge/component/permanent-database/filtering-entry/port-map/map-type/dynamic-filtering-entries */
typedef struct y_dot1q_T_dynamic_filtering_entries_4_ {
    y_dot1q_T_dynamic_filtering_entries_5 v_dynamic_filtering_entries;
} y_dot1q_T_dynamic_filtering_entries_4;

/* choice /bridges/bridge/component/permanent-database/filtering-entry/port-map/map-type */
typedef union y_dot1q_T_map_type_2_ {
    y_dot1q_T_static_filtering_entries_4 v_static_filtering_entries;
    y_dot1q_T_static_vlan_registration_entries_6 v_static_vlan_registration_entries;
    y_dot1q_T_mac_address_registration_entries_5 v_mac_address_registration_entries;
    y_dot1q_T_dynamic_vlan_registration_entries_5 v_dynamic_vlan_registration_entries;
    y_dot1q_T_dynamic_reservation_entries_4 v_dynamic_reservation_entries;
    y_dot1q_T_dynamic_filtering_entries_4 v_dynamic_filtering_entries;
} y_dot1q_T_map_type_2;

/* list /bridges/bridge/component/permanent-database/filtering-entry/port-map */
typedef struct y_dot1q_T_port_map_2_ {
    dlq_hdr_t qhdr;
    uint32 v_port_ref;
    y_dot1q_T_map_type_2 v_map_type;
} y_dot1q_T_port_map_2;

/* list /bridges/bridge/component/permanent-database/filtering-entry */
typedef struct y_dot1q_T_filtering_entry_1_ {
    dlq_hdr_t qhdr;
    uint32 v_database_id;
    xmlChar *v_address;
    xmlChar *v_vids;
    xmlChar *v_status;
    dlq_hdr_t v_port_map;
} y_dot1q_T_filtering_entry_1;

/* container /bridges/bridge/component/permanent-database */
typedef struct y_dot1q_T_permanent_database_ {
    uint32 v_size;
    uint32 v_static_entries;
    uint32 v_static_vlan_registration_entries;
    dlq_hdr_t v_filtering_entry;
} y_dot1q_T_permanent_database;

/* leaf-list /bridges/bridge/component/bridge-vlan/vlan/untagged-ports */
typedef struct y_dot1q_T_untagged_ports_ {
    dlq_hdr_t qhdr;
    xmlChar *v_untagged_ports;
} y_dot1q_T_untagged_ports;

/* leaf-list /bridges/bridge/component/bridge-vlan/vlan/egress-ports */
typedef struct y_dot1q_T_egress_ports_ {
    dlq_hdr_t qhdr;
    xmlChar *v_egress_ports;
} y_dot1q_T_egress_ports;

/* list /bridges/bridge/component/bridge-vlan/vlan */
typedef struct y_dot1q_T_vlan_ {
    dlq_hdr_t qhdr;
    uint32 v_vid;
    xmlChar *v_name;
    dlq_hdr_t v_untagged_ports;
    dlq_hdr_t v_egress_ports;
} y_dot1q_T_vlan;

/* case /bridges/bridge/component/bridge-vlan/protocol-group-database/frame-format/ethernet-rfc1042-snap8021H */
typedef struct y_dot1q_T_ethernet_rfc1042_snap8021H_ {
    xmlChar *v_ethertype;
} y_dot1q_T_ethernet_rfc1042_snap8021H;

/* case /bridges/bridge/component/bridge-vlan/protocol-group-database/frame-format/snap-other */
typedef struct y_dot1q_T_snap_other_ {
    xmlChar *v_protocol_id;
} y_dot1q_T_snap_other;

/* container /bridges/bridge/component/bridge-vlan/protocol-group-database/frame-format/llc-other/dsap-ssap-pairs */
typedef struct y_dot1q_T_dsap_ssap_pairs_ {
    xmlChar *v_llc_address;
} y_dot1q_T_dsap_ssap_pairs;

/* case /bridges/bridge/component/bridge-vlan/protocol-group-database/frame-format/llc-other */
typedef struct y_dot1q_T_llc_other_ {
    y_dot1q_T_dsap_ssap_pairs v_dsap_ssap_pairs;
} y_dot1q_T_llc_other;

/* choice /bridges/bridge/component/bridge-vlan/protocol-group-database/frame-format */
typedef union y_dot1q_T_frame_format_ {
    y_dot1q_T_ethernet_rfc1042_snap8021H v_ethernet_rfc1042_snap8021H;
    y_dot1q_T_snap_other v_snap_other;
    y_dot1q_T_llc_other v_llc_other;
} y_dot1q_T_frame_format;


#ifdef u_dot1q_F_port_and_protocol_based_vlan
/* list /bridges/bridge/component/bridge-vlan/protocol-group-database */
typedef struct y_dot1q_T_protocol_group_database_ {
    dlq_hdr_t qhdr;
    uint16 v_db_index;
    xmlChar *v_frame_format_type;
    y_dot1q_T_frame_format v_frame_format;
    uint32 v_group_id;
} y_dot1q_T_protocol_group_database;
#endif /* u_dot1q_F_port_and_protocol_based_vlan */

/* list /bridges/bridge/component/bridge-vlan/vid-to-fid-allocation */
typedef struct y_dot1q_T_vid_to_fid_allocation_ {
    dlq_hdr_t qhdr;
    xmlChar *v_vids;
    uint32 v_fid;
    xmlChar *v_allocation_type;
} y_dot1q_T_vid_to_fid_allocation;

/* leaf-list /bridges/bridge/component/bridge-vlan/fid-to-vid-allocation/vid */
typedef struct y_dot1q_T_vid_2_ {
    dlq_hdr_t qhdr;
    uint32 v_vid;
} y_dot1q_T_vid_2;

/* list /bridges/bridge/component/bridge-vlan/fid-to-vid-allocation */
typedef struct y_dot1q_T_fid_to_vid_allocation_ {
    dlq_hdr_t qhdr;
    uint32 v_fid;
    xmlChar *v_allocation_type;
    dlq_hdr_t v_vid;
} y_dot1q_T_fid_to_vid_allocation;

/* list /bridges/bridge/component/bridge-vlan/vid-to-fid */
typedef struct y_dot1q_T_vid_to_fid_ {
    dlq_hdr_t qhdr;
    uint32 v_vid;
    uint32 v_fid;
} y_dot1q_T_vid_to_fid;

/* container /bridges/bridge/component/bridge-vlan */
typedef struct y_dot1q_T_bridge_vlan_ {
    uint16 v_version;
    uint16 v_max_vids;
    boolean v_override_default_pvid;

#ifdef u_dot1q_F_port_and_protocol_based_vlan
    xmlChar *v_protocol_template;
#endif /* u_dot1q_F_port_and_protocol_based_vlan */
    uint16 v_max_msti;
    dlq_hdr_t v_vlan;

#ifdef u_dot1q_F_port_and_protocol_based_vlan
    dlq_hdr_t v_protocol_group_database;
#endif /* u_dot1q_F_port_and_protocol_based_vlan */
    dlq_hdr_t v_vid_to_fid_allocation;
    dlq_hdr_t v_fid_to_vid_allocation;
    dlq_hdr_t v_vid_to_fid;
} y_dot1q_T_bridge_vlan;

/* leaf-list /bridges/bridge/component/bridge-mst/mstid */
typedef struct y_dot1q_T_mstid_ {
    dlq_hdr_t qhdr;
    uint32 v_mstid;
} y_dot1q_T_mstid;

/* list /bridges/bridge/component/bridge-mst/fid-to-mstid */
typedef struct y_dot1q_T_fid_to_mstid_ {
    dlq_hdr_t qhdr;
    uint32 v_fid;
    uint32 v_mstid;
} y_dot1q_T_fid_to_mstid;

/* list /bridges/bridge/component/bridge-mst/fid-to-mstid-allocation */
typedef struct y_dot1q_T_fid_to_mstid_allocation_ {
    dlq_hdr_t qhdr;
    xmlChar *v_fids;
    uint32 v_mstid;
} y_dot1q_T_fid_to_mstid_allocation;

/* container /bridges/bridge/component/bridge-mst */
typedef struct y_dot1q_T_bridge_mst_ {
    dlq_hdr_t v_mstid;
    dlq_hdr_t v_fid_to_mstid;
    dlq_hdr_t v_fid_to_mstid_allocation;
} y_dot1q_T_bridge_mst;

/* list /bridges/bridge/component */
typedef struct y_dot1q_T_component_ {
    dlq_hdr_t qhdr;
    xmlChar *v_name;
    uint32 v_id;
    val_idref_t *v_type;
    xmlChar *v_address;
    boolean v_traffic_class_enabled;
    uint16 v_ports;
    dlq_hdr_t v_bridge_port;
    y_dot1q_T_capabilities_1 v_capabilities;
    y_dot1q_T_filtering_database v_filtering_database;
    y_dot1q_T_permanent_database v_permanent_database;
    y_dot1q_T_bridge_vlan v_bridge_vlan;
    y_dot1q_T_bridge_mst v_bridge_mst;
} y_dot1q_T_component;

/* list /bridges/bridge */
typedef struct y_dot1q_T_bridge_ {
    dlq_hdr_t qhdr;
    xmlChar *v_name;
    xmlChar *v_address;
    val_idref_t *v_bridge_type;
    uint16 v_ports;
    uint32 v_up_time;
    uint32 v_components;
    dlq_hdr_t v_component;
} y_dot1q_T_bridge;

/* container /bridges */
typedef struct y_dot1q_T_bridges_ {
    dlq_hdr_t v_bridge;
} y_dot1q_T_bridges;


/**
 * @brief Edit database object callback (agt_cb_fn_t)\n
 * Path: container /interfaces/interface/bridge-port/priority-regeneration
 *
 * @param scb session control block making the request
 * @param msg message in progress for this edit request
 * @param cbtyp callback type for this callback
 * @param editop the parent edit-config operation type,
 * which is also used for all other callbacks
 * that operate on objects.
 * @param newval container object holding the proposed changes
 * to apply to the current config, depending on
 * the editop value. Will not be NULL.
 * @param curval current container values from the "<running>"
 * or "<candidate>" configuration, if any. Could be NULL
 * for create and other operations.
 * @param k_if_name Ancestor key leaf 'name' in list 'interface'\n
 * Path: /if:interfaces/if:interface/if:name
 * @return return status for the phase.
 */
extern status_t u_dot1q_priority_regeneration_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_if_name);


/**
 * @brief Edit database object callback (agt_cb_fn_t)\n
 * Path: container /interfaces/interface/bridge-port/traffic-class
 *
 * @param scb session control block making the request
 * @param msg message in progress for this edit request
 * @param cbtyp callback type for this callback
 * @param editop the parent edit-config operation type,
 * which is also used for all other callbacks
 * that operate on objects.
 * @param newval container object holding the proposed changes
 * to apply to the current config, depending on
 * the editop value. Will not be NULL.
 * @param curval current container values from the "<running>"
 * or "<candidate>" configuration, if any. Could be NULL
 * for create and other operations.
 * @param k_if_name Ancestor key leaf 'name' in list 'interface'\n
 * Path: /if:interfaces/if:interface/if:name
 * @return return status for the phase.
 */
extern status_t u_dot1q_traffic_class_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_if_name);


/**
 * @brief Edit database object callback (agt_cb_fn_t)\n
 * Path: list /interfaces/interface/bridge-port/transmission-selection-algorithm-table/transmission-selection-algorithm-map
 *
 * @param scb session control block making the request
 * @param msg message in progress for this edit request
 * @param cbtyp callback type for this callback
 * @param editop the parent edit-config operation type,
 * which is also used for all other callbacks
 * that operate on objects.
 * @param newval container object holding the proposed changes
 * to apply to the current config, depending on
 * the editop value. Will not be NULL.
 * @param curval current container values from the "<running>"
 * or "<candidate>" configuration, if any. Could be NULL
 * for create and other operations.
 * @param k_if_name Ancestor key leaf 'name' in list 'interface'\n
 * Path: /if:interfaces/if:interface/if:name
 * @param k_dot1q_traffic_class_2 Local key leaf 'traffic-class' in list 'transmission-selection-algorithm-map'\n
 * Path: /if:interfaces/if:interface/dot1q:bridge-port/dot1q:transmission-selection-algorithm-table/dot1q:transmission-selection-algorithm-map/dot1q:traffic-class
 * @return return status for the phase.
 */
extern status_t u_dot1q_transmission_selection_algorithm_map_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_if_name,
    uint8 k_dot1q_traffic_class_2);


/**
 * @brief Edit database object callback (agt_cb_fn_t)\n
 * Path: container /interfaces/interface/bridge-port/transmission-selection-algorithm-table
 *
 * @param scb session control block making the request
 * @param msg message in progress for this edit request
 * @param cbtyp callback type for this callback
 * @param editop the parent edit-config operation type,
 * which is also used for all other callbacks
 * that operate on objects.
 * @param newval container object holding the proposed changes
 * to apply to the current config, depending on
 * the editop value. Will not be NULL.
 * @param curval current container values from the "<running>"
 * or "<candidate>" configuration, if any. Could be NULL
 * for create and other operations.
 * @param k_if_name Ancestor key leaf 'name' in list 'interface'\n
 * Path: /if:interfaces/if:interface/if:name
 * @return return status for the phase.
 */
extern status_t u_dot1q_transmission_selection_algorithm_table_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_if_name);


/**
 * @brief Get database object callback for leaf address (getcb_fn2_t)\n
 * Path: leaf /interfaces/interface/bridge-port/address\n
 *
 * Fill in 'get2cb' response fields.
 *
 * @param get2cb GET2 control block for the callback.
 * @param k_if_name Ancestor key leaf 'name' in list 'interface'\n
 * Path: /if:interfaces/if:interface/if:name
 * @return return status of the callback.
 */
extern status_t u_dot1q_address_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_if_name);


/**
 * @brief Edit database object callback (agt_cb_fn_t)\n
 * Path: container /interfaces/interface/bridge-port
 *
 * @param scb session control block making the request
 * @param msg message in progress for this edit request
 * @param cbtyp callback type for this callback
 * @param editop the parent edit-config operation type,
 * which is also used for all other callbacks
 * that operate on objects.
 * @param newval container object holding the proposed changes
 * to apply to the current config, depending on
 * the editop value. Will not be NULL.
 * @param curval current container values from the "<running>"
 * or "<candidate>" configuration, if any. Could be NULL
 * for create and other operations.
 * @param k_if_name Ancestor key leaf 'name' in list 'interface'\n
 * Path: /if:interfaces/if:interface/if:name
 * @return return status for the phase.
 */
extern status_t u_dot1q_bridge_port_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_if_name);


/**
 * @brief Get database object callback for leaf ports (getcb_fn2_t)\n
 * Path: leaf /bridges/bridge/ports\n
 *
 * Fill in 'get2cb' response fields.
 *
 * @param get2cb GET2 control block for the callback.
 * @param k_dot1q_name Ancestor key leaf 'name' in list 'bridge'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:name
 * @return return status of the callback.
 */
extern status_t u_dot1q_ports_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_dot1q_name);


/**
 * @brief Get database object callback for leaf up-time (getcb_fn2_t)\n
 * Path: leaf /bridges/bridge/up-time\n
 *
 * Fill in 'get2cb' response fields.
 *
 * @param get2cb GET2 control block for the callback.
 * @param k_dot1q_name Ancestor key leaf 'name' in list 'bridge'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:name
 * @return return status of the callback.
 */
extern status_t u_dot1q_up_time_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_dot1q_name);


/**
 * @brief Get database object callback for leaf components (getcb_fn2_t)\n
 * Path: leaf /bridges/bridge/components\n
 *
 * Fill in 'get2cb' response fields.
 *
 * @param get2cb GET2 control block for the callback.
 * @param k_dot1q_name Ancestor key leaf 'name' in list 'bridge'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:name
 * @return return status of the callback.
 */
extern status_t u_dot1q_components_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_dot1q_name);


/**
 * @brief Get database object callback for leaf ports (getcb_fn2_t)\n
 * Path: leaf /bridges/bridge/component/ports\n
 *
 * Fill in 'get2cb' response fields.
 *
 * @param get2cb GET2 control block for the callback.
 * @param k_dot1q_name Ancestor key leaf 'name' in list 'bridge'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:name
 * @param k_dot1q_name_1 Ancestor key leaf 'name' in list 'component'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:name
 * @return return status of the callback.
 */
extern status_t u_dot1q_ports_1_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_dot1q_name,
    const xmlChar *k_dot1q_name_1);


/**
 * @brief Get database object callback for leaf-list bridge-port (getcb_fn2_t)\n
 * Path: leaf-list /bridges/bridge/component/bridge-port\n
 *
 * Fill in 'get2cb' response fields.
 *
 * @param get2cb GET2 control block for the callback.
 * @param k_dot1q_name Ancestor key leaf 'name' in list 'bridge'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:name
 * @param k_dot1q_name_1 Ancestor key leaf 'name' in list 'component'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:name
 * @return return status of the callback.
 */
extern status_t u_dot1q_bridge_port_1_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_dot1q_name,
    const xmlChar *k_dot1q_name_1);


/**
 * @brief Get database object callback for container capabilities (getcb_fn2_t)\n
 * Path: container /bridges/bridge/component/capabilities\n
 *
 * Fill in 'get2cb' response fields.
 *
 * @param get2cb GET2 control block for the callback.
 * @param k_dot1q_name Ancestor key leaf 'name' in list 'bridge'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:name
 * @param k_dot1q_name_1 Ancestor key leaf 'name' in list 'component'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:name
 * @return return status of the callback.
 */
extern status_t u_dot1q_capabilities_1_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_dot1q_name,
    const xmlChar *k_dot1q_name_1);


/**
 * @brief Get database object callback for leaf size (getcb_fn2_t)\n
 * Path: leaf /bridges/bridge/component/filtering-database/size\n
 *
 * Fill in 'get2cb' response fields.
 *
 * @param get2cb GET2 control block for the callback.
 * @param k_dot1q_name Ancestor key leaf 'name' in list 'bridge'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:name
 * @param k_dot1q_name_1 Ancestor key leaf 'name' in list 'component'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:name
 * @return return status of the callback.
 */
extern status_t u_dot1q_size_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_dot1q_name,
    const xmlChar *k_dot1q_name_1);


/**
 * @brief Get database object callback for leaf static-entries (getcb_fn2_t)\n
 * Path: leaf /bridges/bridge/component/filtering-database/static-entries\n
 *
 * Fill in 'get2cb' response fields.
 *
 * @param get2cb GET2 control block for the callback.
 * @param k_dot1q_name Ancestor key leaf 'name' in list 'bridge'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:name
 * @param k_dot1q_name_1 Ancestor key leaf 'name' in list 'component'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:name
 * @return return status of the callback.
 */
extern status_t u_dot1q_static_entries_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_dot1q_name,
    const xmlChar *k_dot1q_name_1);


/**
 * @brief Get database object callback for leaf dynamic-entries (getcb_fn2_t)\n
 * Path: leaf /bridges/bridge/component/filtering-database/dynamic-entries\n
 *
 * Fill in 'get2cb' response fields.
 *
 * @param get2cb GET2 control block for the callback.
 * @param k_dot1q_name Ancestor key leaf 'name' in list 'bridge'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:name
 * @param k_dot1q_name_1 Ancestor key leaf 'name' in list 'component'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:name
 * @return return status of the callback.
 */
extern status_t u_dot1q_dynamic_entries_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_dot1q_name,
    const xmlChar *k_dot1q_name_1);


/**
 * @brief Get database object callback for leaf static-vlan-registration-entries (getcb_fn2_t)\n
 * Path: leaf /bridges/bridge/component/filtering-database/static-vlan-registration-entries\n
 *
 * Fill in 'get2cb' response fields.
 *
 * @param get2cb GET2 control block for the callback.
 * @param k_dot1q_name Ancestor key leaf 'name' in list 'bridge'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:name
 * @param k_dot1q_name_1 Ancestor key leaf 'name' in list 'component'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:name
 * @return return status of the callback.
 */
extern status_t u_dot1q_static_vlan_registration_entries_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_dot1q_name,
    const xmlChar *k_dot1q_name_1);


/**
 * @brief Get database object callback for leaf dynamic-vlan-registration-entries (getcb_fn2_t)\n
 * Path: leaf /bridges/bridge/component/filtering-database/dynamic-vlan-registration-entries\n
 *
 * Fill in 'get2cb' response fields.
 *
 * @param get2cb GET2 control block for the callback.
 * @param k_dot1q_name Ancestor key leaf 'name' in list 'bridge'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:name
 * @param k_dot1q_name_1 Ancestor key leaf 'name' in list 'component'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:name
 * @return return status of the callback.
 */
extern status_t u_dot1q_dynamic_vlan_registration_entries_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_dot1q_name,
    const xmlChar *k_dot1q_name_1);


#ifdef u_dot1q_F_extended_filtering_services

/**
 * @brief Get database object callback for leaf mac-address-registration-entries (getcb_fn2_t)\n
 * Path: leaf /bridges/bridge/component/filtering-database/mac-address-registration-entries\n
 *
 * Fill in 'get2cb' response fields.
 *
 * @param get2cb GET2 control block for the callback.
 * @param k_dot1q_name Ancestor key leaf 'name' in list 'bridge'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:name
 * @param k_dot1q_name_1 Ancestor key leaf 'name' in list 'component'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:name
 * @return return status of the callback.
 */
extern status_t u_dot1q_mac_address_registration_entries_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_dot1q_name,
    const xmlChar *k_dot1q_name_1);

#endif /* u_dot1q_F_extended_filtering_services */


/**
 * @brief Edit database object callback (agt_cb_fn_t)\n
 * Path: container /bridges/bridge/component/filtering-database/filtering-entry/port-map/map-type/static-filtering-entries/static-filtering-entries
 *
 * @param scb session control block making the request
 * @param msg message in progress for this edit request
 * @param cbtyp callback type for this callback
 * @param editop the parent edit-config operation type,
 * which is also used for all other callbacks
 * that operate on objects.
 * @param newval container object holding the proposed changes
 * to apply to the current config, depending on
 * the editop value. Will not be NULL.
 * @param curval current container values from the "<running>"
 * or "<candidate>" configuration, if any. Could be NULL
 * for create and other operations.
 * @param k_dot1q_name Ancestor key leaf 'name' in list 'bridge'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:name
 * @param k_dot1q_name_1 Ancestor key leaf 'name' in list 'component'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:name
 * @param k_dot1q_database_id Ancestor key leaf 'database-id' in list 'filtering-entry'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:filtering-database/dot1q:filtering-entry/dot1q:database-id
 * @param k_dot1q_vids Ancestor key leaf 'vids' in list 'filtering-entry'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:filtering-database/dot1q:filtering-entry/dot1q:vids
 * @param k_dot1q_address_3 Ancestor key leaf 'address' in list 'filtering-entry'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:filtering-database/dot1q:filtering-entry/dot1q:address
 * @param k_dot1q_port_ref Ancestor key leaf 'port-ref' in list 'port-map'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:filtering-database/dot1q:filtering-entry/dot1q:port-map/dot1q:port-ref
 * @return return status for the phase.
 */
extern status_t u_dot1q_static_filtering_entries_1_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_dot1q_name,
    const xmlChar *k_dot1q_name_1,
    uint32 k_dot1q_database_id,
    const xmlChar *k_dot1q_vids,
    const xmlChar *k_dot1q_address_3,
    uint32 k_dot1q_port_ref);


/**
 * @brief Edit database object callback (agt_cb_fn_t)\n
 * Path: container /bridges/bridge/component/filtering-database/filtering-entry/port-map/map-type/static-vlan-registration-entries/static-vlan-registration-entries
 *
 * @param scb session control block making the request
 * @param msg message in progress for this edit request
 * @param cbtyp callback type for this callback
 * @param editop the parent edit-config operation type,
 * which is also used for all other callbacks
 * that operate on objects.
 * @param newval container object holding the proposed changes
 * to apply to the current config, depending on
 * the editop value. Will not be NULL.
 * @param curval current container values from the "<running>"
 * or "<candidate>" configuration, if any. Could be NULL
 * for create and other operations.
 * @param k_dot1q_name Ancestor key leaf 'name' in list 'bridge'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:name
 * @param k_dot1q_name_1 Ancestor key leaf 'name' in list 'component'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:name
 * @param k_dot1q_database_id Ancestor key leaf 'database-id' in list 'filtering-entry'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:filtering-database/dot1q:filtering-entry/dot1q:database-id
 * @param k_dot1q_vids Ancestor key leaf 'vids' in list 'filtering-entry'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:filtering-database/dot1q:filtering-entry/dot1q:vids
 * @param k_dot1q_address_3 Ancestor key leaf 'address' in list 'filtering-entry'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:filtering-database/dot1q:filtering-entry/dot1q:address
 * @param k_dot1q_port_ref Ancestor key leaf 'port-ref' in list 'port-map'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:filtering-database/dot1q:filtering-entry/dot1q:port-map/dot1q:port-ref
 * @return return status for the phase.
 */
extern status_t u_dot1q_static_vlan_registration_entries_2_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_dot1q_name,
    const xmlChar *k_dot1q_name_1,
    uint32 k_dot1q_database_id,
    const xmlChar *k_dot1q_vids,
    const xmlChar *k_dot1q_address_3,
    uint32 k_dot1q_port_ref);


/**
 * @brief Edit database object callback (agt_cb_fn_t)\n
 * Path: container /bridges/bridge/component/filtering-database/filtering-entry/port-map/map-type/mac-address-registration-entries/mac-address-registration-entries
 *
 * @param scb session control block making the request
 * @param msg message in progress for this edit request
 * @param cbtyp callback type for this callback
 * @param editop the parent edit-config operation type,
 * which is also used for all other callbacks
 * that operate on objects.
 * @param newval container object holding the proposed changes
 * to apply to the current config, depending on
 * the editop value. Will not be NULL.
 * @param curval current container values from the "<running>"
 * or "<candidate>" configuration, if any. Could be NULL
 * for create and other operations.
 * @param k_dot1q_name Ancestor key leaf 'name' in list 'bridge'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:name
 * @param k_dot1q_name_1 Ancestor key leaf 'name' in list 'component'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:name
 * @param k_dot1q_database_id Ancestor key leaf 'database-id' in list 'filtering-entry'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:filtering-database/dot1q:filtering-entry/dot1q:database-id
 * @param k_dot1q_vids Ancestor key leaf 'vids' in list 'filtering-entry'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:filtering-database/dot1q:filtering-entry/dot1q:vids
 * @param k_dot1q_address_3 Ancestor key leaf 'address' in list 'filtering-entry'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:filtering-database/dot1q:filtering-entry/dot1q:address
 * @param k_dot1q_port_ref Ancestor key leaf 'port-ref' in list 'port-map'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:filtering-database/dot1q:filtering-entry/dot1q:port-map/dot1q:port-ref
 * @return return status for the phase.
 */
extern status_t u_dot1q_mac_address_registration_entries_2_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_dot1q_name,
    const xmlChar *k_dot1q_name_1,
    uint32 k_dot1q_database_id,
    const xmlChar *k_dot1q_vids,
    const xmlChar *k_dot1q_address_3,
    uint32 k_dot1q_port_ref);


/**
 * @brief Edit database object callback (agt_cb_fn_t)\n
 * Path: container /bridges/bridge/component/filtering-database/filtering-entry/port-map/map-type/dynamic-vlan-registration-entries/dynamic-vlan-registration-entries
 *
 * @param scb session control block making the request
 * @param msg message in progress for this edit request
 * @param cbtyp callback type for this callback
 * @param editop the parent edit-config operation type,
 * which is also used for all other callbacks
 * that operate on objects.
 * @param newval container object holding the proposed changes
 * to apply to the current config, depending on
 * the editop value. Will not be NULL.
 * @param curval current container values from the "<running>"
 * or "<candidate>" configuration, if any. Could be NULL
 * for create and other operations.
 * @param k_dot1q_name Ancestor key leaf 'name' in list 'bridge'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:name
 * @param k_dot1q_name_1 Ancestor key leaf 'name' in list 'component'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:name
 * @param k_dot1q_database_id Ancestor key leaf 'database-id' in list 'filtering-entry'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:filtering-database/dot1q:filtering-entry/dot1q:database-id
 * @param k_dot1q_vids Ancestor key leaf 'vids' in list 'filtering-entry'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:filtering-database/dot1q:filtering-entry/dot1q:vids
 * @param k_dot1q_address_3 Ancestor key leaf 'address' in list 'filtering-entry'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:filtering-database/dot1q:filtering-entry/dot1q:address
 * @param k_dot1q_port_ref Ancestor key leaf 'port-ref' in list 'port-map'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:filtering-database/dot1q:filtering-entry/dot1q:port-map/dot1q:port-ref
 * @return return status for the phase.
 */
extern status_t u_dot1q_dynamic_vlan_registration_entries_2_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_dot1q_name,
    const xmlChar *k_dot1q_name_1,
    uint32 k_dot1q_database_id,
    const xmlChar *k_dot1q_vids,
    const xmlChar *k_dot1q_address_3,
    uint32 k_dot1q_port_ref);


/**
 * @brief Edit database object callback (agt_cb_fn_t)\n
 * Path: container /bridges/bridge/component/filtering-database/filtering-entry/port-map/map-type/dynamic-reservation-entries/dynamic-reservation-entries
 *
 * @param scb session control block making the request
 * @param msg message in progress for this edit request
 * @param cbtyp callback type for this callback
 * @param editop the parent edit-config operation type,
 * which is also used for all other callbacks
 * that operate on objects.
 * @param newval container object holding the proposed changes
 * to apply to the current config, depending on
 * the editop value. Will not be NULL.
 * @param curval current container values from the "<running>"
 * or "<candidate>" configuration, if any. Could be NULL
 * for create and other operations.
 * @param k_dot1q_name Ancestor key leaf 'name' in list 'bridge'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:name
 * @param k_dot1q_name_1 Ancestor key leaf 'name' in list 'component'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:name
 * @param k_dot1q_database_id Ancestor key leaf 'database-id' in list 'filtering-entry'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:filtering-database/dot1q:filtering-entry/dot1q:database-id
 * @param k_dot1q_vids Ancestor key leaf 'vids' in list 'filtering-entry'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:filtering-database/dot1q:filtering-entry/dot1q:vids
 * @param k_dot1q_address_3 Ancestor key leaf 'address' in list 'filtering-entry'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:filtering-database/dot1q:filtering-entry/dot1q:address
 * @param k_dot1q_port_ref Ancestor key leaf 'port-ref' in list 'port-map'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:filtering-database/dot1q:filtering-entry/dot1q:port-map/dot1q:port-ref
 * @return return status for the phase.
 */
extern status_t u_dot1q_dynamic_reservation_entries_1_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_dot1q_name,
    const xmlChar *k_dot1q_name_1,
    uint32 k_dot1q_database_id,
    const xmlChar *k_dot1q_vids,
    const xmlChar *k_dot1q_address_3,
    uint32 k_dot1q_port_ref);


/**
 * @brief Edit database object callback (agt_cb_fn_t)\n
 * Path: container /bridges/bridge/component/filtering-database/filtering-entry/port-map/map-type/dynamic-filtering-entries/dynamic-filtering-entries
 *
 * @param scb session control block making the request
 * @param msg message in progress for this edit request
 * @param cbtyp callback type for this callback
 * @param editop the parent edit-config operation type,
 * which is also used for all other callbacks
 * that operate on objects.
 * @param newval container object holding the proposed changes
 * to apply to the current config, depending on
 * the editop value. Will not be NULL.
 * @param curval current container values from the "<running>"
 * or "<candidate>" configuration, if any. Could be NULL
 * for create and other operations.
 * @param k_dot1q_name Ancestor key leaf 'name' in list 'bridge'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:name
 * @param k_dot1q_name_1 Ancestor key leaf 'name' in list 'component'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:name
 * @param k_dot1q_database_id Ancestor key leaf 'database-id' in list 'filtering-entry'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:filtering-database/dot1q:filtering-entry/dot1q:database-id
 * @param k_dot1q_vids Ancestor key leaf 'vids' in list 'filtering-entry'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:filtering-database/dot1q:filtering-entry/dot1q:vids
 * @param k_dot1q_address_3 Ancestor key leaf 'address' in list 'filtering-entry'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:filtering-database/dot1q:filtering-entry/dot1q:address
 * @param k_dot1q_port_ref Ancestor key leaf 'port-ref' in list 'port-map'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:filtering-database/dot1q:filtering-entry/dot1q:port-map/dot1q:port-ref
 * @return return status for the phase.
 */
extern status_t u_dot1q_dynamic_filtering_entries_1_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_dot1q_name,
    const xmlChar *k_dot1q_name_1,
    uint32 k_dot1q_database_id,
    const xmlChar *k_dot1q_vids,
    const xmlChar *k_dot1q_address_3,
    uint32 k_dot1q_port_ref);


/**
 * @brief Edit database object callback (agt_cb_fn_t)\n
 * Path: list /bridges/bridge/component/filtering-database/filtering-entry/port-map
 *
 * @param scb session control block making the request
 * @param msg message in progress for this edit request
 * @param cbtyp callback type for this callback
 * @param editop the parent edit-config operation type,
 * which is also used for all other callbacks
 * that operate on objects.
 * @param newval container object holding the proposed changes
 * to apply to the current config, depending on
 * the editop value. Will not be NULL.
 * @param curval current container values from the "<running>"
 * or "<candidate>" configuration, if any. Could be NULL
 * for create and other operations.
 * @param k_dot1q_name Ancestor key leaf 'name' in list 'bridge'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:name
 * @param k_dot1q_name_1 Ancestor key leaf 'name' in list 'component'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:name
 * @param k_dot1q_database_id Ancestor key leaf 'database-id' in list 'filtering-entry'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:filtering-database/dot1q:filtering-entry/dot1q:database-id
 * @param k_dot1q_vids Ancestor key leaf 'vids' in list 'filtering-entry'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:filtering-database/dot1q:filtering-entry/dot1q:vids
 * @param k_dot1q_address_3 Ancestor key leaf 'address' in list 'filtering-entry'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:filtering-database/dot1q:filtering-entry/dot1q:address
 * @param k_dot1q_port_ref Local key leaf 'port-ref' in list 'port-map'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:filtering-database/dot1q:filtering-entry/dot1q:port-map/dot1q:port-ref
 * @return return status for the phase.
 */
extern status_t u_dot1q_port_map_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_dot1q_name,
    const xmlChar *k_dot1q_name_1,
    uint32 k_dot1q_database_id,
    const xmlChar *k_dot1q_vids,
    const xmlChar *k_dot1q_address_3,
    uint32 k_dot1q_port_ref);


/**
 * @brief Get database object callback for leaf status (getcb_fn2_t)\n
 * Path: leaf /bridges/bridge/component/filtering-database/filtering-entry/status\n
 *
 * Fill in 'get2cb' response fields.
 *
 * @param get2cb GET2 control block for the callback.
 * @param k_dot1q_name Ancestor key leaf 'name' in list 'bridge'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:name
 * @param k_dot1q_name_1 Ancestor key leaf 'name' in list 'component'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:name
 * @param k_dot1q_database_id Ancestor key leaf 'database-id' in list 'filtering-entry'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:filtering-database/dot1q:filtering-entry/dot1q:database-id
 * @param k_dot1q_vids Ancestor key leaf 'vids' in list 'filtering-entry'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:filtering-database/dot1q:filtering-entry/dot1q:vids
 * @param k_dot1q_address_3 Ancestor key leaf 'address' in list 'filtering-entry'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:filtering-database/dot1q:filtering-entry/dot1q:address
 * @return return status of the callback.
 */
extern status_t u_dot1q_status_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_dot1q_name,
    const xmlChar *k_dot1q_name_1,
    uint32 k_dot1q_database_id,
    const xmlChar *k_dot1q_vids,
    const xmlChar *k_dot1q_address_3);


/**
 * @brief Edit database object callback (agt_cb_fn_t)\n
 * Path: list /bridges/bridge/component/filtering-database/filtering-entry
 *
 * @param scb session control block making the request
 * @param msg message in progress for this edit request
 * @param cbtyp callback type for this callback
 * @param editop the parent edit-config operation type,
 * which is also used for all other callbacks
 * that operate on objects.
 * @param newval container object holding the proposed changes
 * to apply to the current config, depending on
 * the editop value. Will not be NULL.
 * @param curval current container values from the "<running>"
 * or "<candidate>" configuration, if any. Could be NULL
 * for create and other operations.
 * @param k_dot1q_name Ancestor key leaf 'name' in list 'bridge'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:name
 * @param k_dot1q_name_1 Ancestor key leaf 'name' in list 'component'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:name
 * @param k_dot1q_database_id Local key leaf 'database-id' in list 'filtering-entry'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:filtering-database/dot1q:filtering-entry/dot1q:database-id
 * @param k_dot1q_vids Local key leaf 'vids' in list 'filtering-entry'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:filtering-database/dot1q:filtering-entry/dot1q:vids
 * @param k_dot1q_address_3 Local key leaf 'address' in list 'filtering-entry'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:filtering-database/dot1q:filtering-entry/dot1q:address
 * @return return status for the phase.
 */
extern status_t u_dot1q_filtering_entry_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_dot1q_name,
    const xmlChar *k_dot1q_name_1,
    uint32 k_dot1q_database_id,
    const xmlChar *k_dot1q_vids,
    const xmlChar *k_dot1q_address_3);


/**
 * @brief Edit database object callback (agt_cb_fn_t)\n
 * Path: container /bridges/bridge/component/filtering-database/vlan-registration-entry/port-map/map-type/static-filtering-entries/static-filtering-entries
 *
 * @param scb session control block making the request
 * @param msg message in progress for this edit request
 * @param cbtyp callback type for this callback
 * @param editop the parent edit-config operation type,
 * which is also used for all other callbacks
 * that operate on objects.
 * @param newval container object holding the proposed changes
 * to apply to the current config, depending on
 * the editop value. Will not be NULL.
 * @param curval current container values from the "<running>"
 * or "<candidate>" configuration, if any. Could be NULL
 * for create and other operations.
 * @param k_dot1q_name Ancestor key leaf 'name' in list 'bridge'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:name
 * @param k_dot1q_name_1 Ancestor key leaf 'name' in list 'component'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:name
 * @param k_dot1q_database_id_1 Ancestor key leaf 'database-id' in list 'vlan-registration-entry'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:filtering-database/dot1q:vlan-registration-entry/dot1q:database-id
 * @param k_dot1q_vids_1 Ancestor key leaf 'vids' in list 'vlan-registration-entry'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:filtering-database/dot1q:vlan-registration-entry/dot1q:vids
 * @param k_dot1q_port_ref_1 Ancestor key leaf 'port-ref' in list 'port-map'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:filtering-database/dot1q:vlan-registration-entry/dot1q:port-map/dot1q:port-ref
 * @return return status for the phase.
 */
extern status_t u_dot1q_static_filtering_entries_3_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_dot1q_name,
    const xmlChar *k_dot1q_name_1,
    uint32 k_dot1q_database_id_1,
    const xmlChar *k_dot1q_vids_1,
    uint32 k_dot1q_port_ref_1);


/**
 * @brief Edit database object callback (agt_cb_fn_t)\n
 * Path: container /bridges/bridge/component/filtering-database/vlan-registration-entry/port-map/map-type/static-vlan-registration-entries/static-vlan-registration-entries
 *
 * @param scb session control block making the request
 * @param msg message in progress for this edit request
 * @param cbtyp callback type for this callback
 * @param editop the parent edit-config operation type,
 * which is also used for all other callbacks
 * that operate on objects.
 * @param newval container object holding the proposed changes
 * to apply to the current config, depending on
 * the editop value. Will not be NULL.
 * @param curval current container values from the "<running>"
 * or "<candidate>" configuration, if any. Could be NULL
 * for create and other operations.
 * @param k_dot1q_name Ancestor key leaf 'name' in list 'bridge'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:name
 * @param k_dot1q_name_1 Ancestor key leaf 'name' in list 'component'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:name
 * @param k_dot1q_database_id_1 Ancestor key leaf 'database-id' in list 'vlan-registration-entry'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:filtering-database/dot1q:vlan-registration-entry/dot1q:database-id
 * @param k_dot1q_vids_1 Ancestor key leaf 'vids' in list 'vlan-registration-entry'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:filtering-database/dot1q:vlan-registration-entry/dot1q:vids
 * @param k_dot1q_port_ref_1 Ancestor key leaf 'port-ref' in list 'port-map'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:filtering-database/dot1q:vlan-registration-entry/dot1q:port-map/dot1q:port-ref
 * @return return status for the phase.
 */
extern status_t u_dot1q_static_vlan_registration_entries_4_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_dot1q_name,
    const xmlChar *k_dot1q_name_1,
    uint32 k_dot1q_database_id_1,
    const xmlChar *k_dot1q_vids_1,
    uint32 k_dot1q_port_ref_1);


/**
 * @brief Edit database object callback (agt_cb_fn_t)\n
 * Path: container /bridges/bridge/component/filtering-database/vlan-registration-entry/port-map/map-type/mac-address-registration-entries/mac-address-registration-entries
 *
 * @param scb session control block making the request
 * @param msg message in progress for this edit request
 * @param cbtyp callback type for this callback
 * @param editop the parent edit-config operation type,
 * which is also used for all other callbacks
 * that operate on objects.
 * @param newval container object holding the proposed changes
 * to apply to the current config, depending on
 * the editop value. Will not be NULL.
 * @param curval current container values from the "<running>"
 * or "<candidate>" configuration, if any. Could be NULL
 * for create and other operations.
 * @param k_dot1q_name Ancestor key leaf 'name' in list 'bridge'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:name
 * @param k_dot1q_name_1 Ancestor key leaf 'name' in list 'component'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:name
 * @param k_dot1q_database_id_1 Ancestor key leaf 'database-id' in list 'vlan-registration-entry'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:filtering-database/dot1q:vlan-registration-entry/dot1q:database-id
 * @param k_dot1q_vids_1 Ancestor key leaf 'vids' in list 'vlan-registration-entry'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:filtering-database/dot1q:vlan-registration-entry/dot1q:vids
 * @param k_dot1q_port_ref_1 Ancestor key leaf 'port-ref' in list 'port-map'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:filtering-database/dot1q:vlan-registration-entry/dot1q:port-map/dot1q:port-ref
 * @return return status for the phase.
 */
extern status_t u_dot1q_mac_address_registration_entries_4_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_dot1q_name,
    const xmlChar *k_dot1q_name_1,
    uint32 k_dot1q_database_id_1,
    const xmlChar *k_dot1q_vids_1,
    uint32 k_dot1q_port_ref_1);


/**
 * @brief Edit database object callback (agt_cb_fn_t)\n
 * Path: container /bridges/bridge/component/filtering-database/vlan-registration-entry/port-map/map-type/dynamic-vlan-registration-entries/dynamic-vlan-registration-entries
 *
 * @param scb session control block making the request
 * @param msg message in progress for this edit request
 * @param cbtyp callback type for this callback
 * @param editop the parent edit-config operation type,
 * which is also used for all other callbacks
 * that operate on objects.
 * @param newval container object holding the proposed changes
 * to apply to the current config, depending on
 * the editop value. Will not be NULL.
 * @param curval current container values from the "<running>"
 * or "<candidate>" configuration, if any. Could be NULL
 * for create and other operations.
 * @param k_dot1q_name Ancestor key leaf 'name' in list 'bridge'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:name
 * @param k_dot1q_name_1 Ancestor key leaf 'name' in list 'component'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:name
 * @param k_dot1q_database_id_1 Ancestor key leaf 'database-id' in list 'vlan-registration-entry'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:filtering-database/dot1q:vlan-registration-entry/dot1q:database-id
 * @param k_dot1q_vids_1 Ancestor key leaf 'vids' in list 'vlan-registration-entry'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:filtering-database/dot1q:vlan-registration-entry/dot1q:vids
 * @param k_dot1q_port_ref_1 Ancestor key leaf 'port-ref' in list 'port-map'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:filtering-database/dot1q:vlan-registration-entry/dot1q:port-map/dot1q:port-ref
 * @return return status for the phase.
 */
extern status_t u_dot1q_dynamic_vlan_registration_entries_4_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_dot1q_name,
    const xmlChar *k_dot1q_name_1,
    uint32 k_dot1q_database_id_1,
    const xmlChar *k_dot1q_vids_1,
    uint32 k_dot1q_port_ref_1);


/**
 * @brief Edit database object callback (agt_cb_fn_t)\n
 * Path: container /bridges/bridge/component/filtering-database/vlan-registration-entry/port-map/map-type/dynamic-reservation-entries/dynamic-reservation-entries
 *
 * @param scb session control block making the request
 * @param msg message in progress for this edit request
 * @param cbtyp callback type for this callback
 * @param editop the parent edit-config operation type,
 * which is also used for all other callbacks
 * that operate on objects.
 * @param newval container object holding the proposed changes
 * to apply to the current config, depending on
 * the editop value. Will not be NULL.
 * @param curval current container values from the "<running>"
 * or "<candidate>" configuration, if any. Could be NULL
 * for create and other operations.
 * @param k_dot1q_name Ancestor key leaf 'name' in list 'bridge'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:name
 * @param k_dot1q_name_1 Ancestor key leaf 'name' in list 'component'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:name
 * @param k_dot1q_database_id_1 Ancestor key leaf 'database-id' in list 'vlan-registration-entry'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:filtering-database/dot1q:vlan-registration-entry/dot1q:database-id
 * @param k_dot1q_vids_1 Ancestor key leaf 'vids' in list 'vlan-registration-entry'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:filtering-database/dot1q:vlan-registration-entry/dot1q:vids
 * @param k_dot1q_port_ref_1 Ancestor key leaf 'port-ref' in list 'port-map'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:filtering-database/dot1q:vlan-registration-entry/dot1q:port-map/dot1q:port-ref
 * @return return status for the phase.
 */
extern status_t u_dot1q_dynamic_reservation_entries_3_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_dot1q_name,
    const xmlChar *k_dot1q_name_1,
    uint32 k_dot1q_database_id_1,
    const xmlChar *k_dot1q_vids_1,
    uint32 k_dot1q_port_ref_1);


/**
 * @brief Edit database object callback (agt_cb_fn_t)\n
 * Path: container /bridges/bridge/component/filtering-database/vlan-registration-entry/port-map/map-type/dynamic-filtering-entries/dynamic-filtering-entries
 *
 * @param scb session control block making the request
 * @param msg message in progress for this edit request
 * @param cbtyp callback type for this callback
 * @param editop the parent edit-config operation type,
 * which is also used for all other callbacks
 * that operate on objects.
 * @param newval container object holding the proposed changes
 * to apply to the current config, depending on
 * the editop value. Will not be NULL.
 * @param curval current container values from the "<running>"
 * or "<candidate>" configuration, if any. Could be NULL
 * for create and other operations.
 * @param k_dot1q_name Ancestor key leaf 'name' in list 'bridge'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:name
 * @param k_dot1q_name_1 Ancestor key leaf 'name' in list 'component'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:name
 * @param k_dot1q_database_id_1 Ancestor key leaf 'database-id' in list 'vlan-registration-entry'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:filtering-database/dot1q:vlan-registration-entry/dot1q:database-id
 * @param k_dot1q_vids_1 Ancestor key leaf 'vids' in list 'vlan-registration-entry'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:filtering-database/dot1q:vlan-registration-entry/dot1q:vids
 * @param k_dot1q_port_ref_1 Ancestor key leaf 'port-ref' in list 'port-map'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:filtering-database/dot1q:vlan-registration-entry/dot1q:port-map/dot1q:port-ref
 * @return return status for the phase.
 */
extern status_t u_dot1q_dynamic_filtering_entries_3_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_dot1q_name,
    const xmlChar *k_dot1q_name_1,
    uint32 k_dot1q_database_id_1,
    const xmlChar *k_dot1q_vids_1,
    uint32 k_dot1q_port_ref_1);


/**
 * @brief Edit database object callback (agt_cb_fn_t)\n
 * Path: list /bridges/bridge/component/filtering-database/vlan-registration-entry/port-map
 *
 * @param scb session control block making the request
 * @param msg message in progress for this edit request
 * @param cbtyp callback type for this callback
 * @param editop the parent edit-config operation type,
 * which is also used for all other callbacks
 * that operate on objects.
 * @param newval container object holding the proposed changes
 * to apply to the current config, depending on
 * the editop value. Will not be NULL.
 * @param curval current container values from the "<running>"
 * or "<candidate>" configuration, if any. Could be NULL
 * for create and other operations.
 * @param k_dot1q_name Ancestor key leaf 'name' in list 'bridge'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:name
 * @param k_dot1q_name_1 Ancestor key leaf 'name' in list 'component'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:name
 * @param k_dot1q_database_id_1 Ancestor key leaf 'database-id' in list 'vlan-registration-entry'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:filtering-database/dot1q:vlan-registration-entry/dot1q:database-id
 * @param k_dot1q_vids_1 Ancestor key leaf 'vids' in list 'vlan-registration-entry'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:filtering-database/dot1q:vlan-registration-entry/dot1q:vids
 * @param k_dot1q_port_ref_1 Local key leaf 'port-ref' in list 'port-map'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:filtering-database/dot1q:vlan-registration-entry/dot1q:port-map/dot1q:port-ref
 * @return return status for the phase.
 */
extern status_t u_dot1q_port_map_1_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_dot1q_name,
    const xmlChar *k_dot1q_name_1,
    uint32 k_dot1q_database_id_1,
    const xmlChar *k_dot1q_vids_1,
    uint32 k_dot1q_port_ref_1);


/**
 * @brief Edit database object callback (agt_cb_fn_t)\n
 * Path: list /bridges/bridge/component/filtering-database/vlan-registration-entry
 *
 * @param scb session control block making the request
 * @param msg message in progress for this edit request
 * @param cbtyp callback type for this callback
 * @param editop the parent edit-config operation type,
 * which is also used for all other callbacks
 * that operate on objects.
 * @param newval container object holding the proposed changes
 * to apply to the current config, depending on
 * the editop value. Will not be NULL.
 * @param curval current container values from the "<running>"
 * or "<candidate>" configuration, if any. Could be NULL
 * for create and other operations.
 * @param k_dot1q_name Ancestor key leaf 'name' in list 'bridge'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:name
 * @param k_dot1q_name_1 Ancestor key leaf 'name' in list 'component'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:name
 * @param k_dot1q_database_id_1 Local key leaf 'database-id' in list 'vlan-registration-entry'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:filtering-database/dot1q:vlan-registration-entry/dot1q:database-id
 * @param k_dot1q_vids_1 Local key leaf 'vids' in list 'vlan-registration-entry'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:filtering-database/dot1q:vlan-registration-entry/dot1q:vids
 * @return return status for the phase.
 */
extern status_t u_dot1q_vlan_registration_entry_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_dot1q_name,
    const xmlChar *k_dot1q_name_1,
    uint32 k_dot1q_database_id_1,
    const xmlChar *k_dot1q_vids_1);


/**
 * @brief Edit database object callback (agt_cb_fn_t)\n
 * Path: container /bridges/bridge/component/filtering-database
 *
 * @param scb session control block making the request
 * @param msg message in progress for this edit request
 * @param cbtyp callback type for this callback
 * @param editop the parent edit-config operation type,
 * which is also used for all other callbacks
 * that operate on objects.
 * @param newval container object holding the proposed changes
 * to apply to the current config, depending on
 * the editop value. Will not be NULL.
 * @param curval current container values from the "<running>"
 * or "<candidate>" configuration, if any. Could be NULL
 * for create and other operations.
 * @param k_dot1q_name Ancestor key leaf 'name' in list 'bridge'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:name
 * @param k_dot1q_name_1 Ancestor key leaf 'name' in list 'component'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:name
 * @return return status for the phase.
 */
extern status_t u_dot1q_filtering_database_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_dot1q_name,
    const xmlChar *k_dot1q_name_1);


/**
 * @brief Get database object callback for leaf size (getcb_fn2_t)\n
 * Path: leaf /bridges/bridge/component/permanent-database/size\n
 *
 * Fill in 'get2cb' response fields.
 *
 * @param get2cb GET2 control block for the callback.
 * @param k_dot1q_name Ancestor key leaf 'name' in list 'bridge'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:name
 * @param k_dot1q_name_1 Ancestor key leaf 'name' in list 'component'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:name
 * @return return status of the callback.
 */
extern status_t u_dot1q_size_1_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_dot1q_name,
    const xmlChar *k_dot1q_name_1);


/**
 * @brief Get database object callback for leaf static-entries (getcb_fn2_t)\n
 * Path: leaf /bridges/bridge/component/permanent-database/static-entries\n
 *
 * Fill in 'get2cb' response fields.
 *
 * @param get2cb GET2 control block for the callback.
 * @param k_dot1q_name Ancestor key leaf 'name' in list 'bridge'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:name
 * @param k_dot1q_name_1 Ancestor key leaf 'name' in list 'component'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:name
 * @return return status of the callback.
 */
extern status_t u_dot1q_static_entries_1_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_dot1q_name,
    const xmlChar *k_dot1q_name_1);


/**
 * @brief Get database object callback for leaf static-vlan-registration-entries (getcb_fn2_t)\n
 * Path: leaf /bridges/bridge/component/permanent-database/static-vlan-registration-entries\n
 *
 * Fill in 'get2cb' response fields.
 *
 * @param get2cb GET2 control block for the callback.
 * @param k_dot1q_name Ancestor key leaf 'name' in list 'bridge'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:name
 * @param k_dot1q_name_1 Ancestor key leaf 'name' in list 'component'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:name
 * @return return status of the callback.
 */
extern status_t u_dot1q_static_vlan_registration_entries_5_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_dot1q_name,
    const xmlChar *k_dot1q_name_1);


/**
 * @brief Get database object callback for leaf status (getcb_fn2_t)\n
 * Path: leaf /bridges/bridge/component/permanent-database/filtering-entry/status\n
 *
 * Fill in 'get2cb' response fields.
 *
 * @param get2cb GET2 control block for the callback.
 * @param k_dot1q_name Ancestor key leaf 'name' in list 'bridge'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:name
 * @param k_dot1q_name_1 Ancestor key leaf 'name' in list 'component'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:name
 * @param k_dot1q_database_id_2 Ancestor key leaf 'database-id' in list 'filtering-entry'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:permanent-database/dot1q:filtering-entry/dot1q:database-id
 * @param k_dot1q_vids_2 Ancestor key leaf 'vids' in list 'filtering-entry'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:permanent-database/dot1q:filtering-entry/dot1q:vids
 * @param k_dot1q_address_4 Ancestor key leaf 'address' in list 'filtering-entry'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:permanent-database/dot1q:filtering-entry/dot1q:address
 * @return return status of the callback.
 */
extern status_t u_dot1q_status_1_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_dot1q_name,
    const xmlChar *k_dot1q_name_1,
    uint32 k_dot1q_database_id_2,
    const xmlChar *k_dot1q_vids_2,
    const xmlChar *k_dot1q_address_4);


/**
 * @brief Edit database object callback (agt_cb_fn_t)\n
 * Path: container /bridges/bridge/component/permanent-database/filtering-entry/port-map/map-type/static-filtering-entries/static-filtering-entries
 *
 * @param scb session control block making the request
 * @param msg message in progress for this edit request
 * @param cbtyp callback type for this callback
 * @param editop the parent edit-config operation type,
 * which is also used for all other callbacks
 * that operate on objects.
 * @param newval container object holding the proposed changes
 * to apply to the current config, depending on
 * the editop value. Will not be NULL.
 * @param curval current container values from the "<running>"
 * or "<candidate>" configuration, if any. Could be NULL
 * for create and other operations.
 * @param k_dot1q_name Ancestor key leaf 'name' in list 'bridge'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:name
 * @param k_dot1q_name_1 Ancestor key leaf 'name' in list 'component'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:name
 * @param k_dot1q_database_id_2 Ancestor key leaf 'database-id' in list 'filtering-entry'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:permanent-database/dot1q:filtering-entry/dot1q:database-id
 * @param k_dot1q_vids_2 Ancestor key leaf 'vids' in list 'filtering-entry'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:permanent-database/dot1q:filtering-entry/dot1q:vids
 * @param k_dot1q_address_4 Ancestor key leaf 'address' in list 'filtering-entry'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:permanent-database/dot1q:filtering-entry/dot1q:address
 * @param k_dot1q_port_ref_2 Ancestor key leaf 'port-ref' in list 'port-map'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:permanent-database/dot1q:filtering-entry/dot1q:port-map/dot1q:port-ref
 * @return return status for the phase.
 */
extern status_t u_dot1q_static_filtering_entries_5_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_dot1q_name,
    const xmlChar *k_dot1q_name_1,
    uint32 k_dot1q_database_id_2,
    const xmlChar *k_dot1q_vids_2,
    const xmlChar *k_dot1q_address_4,
    uint32 k_dot1q_port_ref_2);


/**
 * @brief Edit database object callback (agt_cb_fn_t)\n
 * Path: container /bridges/bridge/component/permanent-database/filtering-entry/port-map/map-type/static-vlan-registration-entries/static-vlan-registration-entries
 *
 * @param scb session control block making the request
 * @param msg message in progress for this edit request
 * @param cbtyp callback type for this callback
 * @param editop the parent edit-config operation type,
 * which is also used for all other callbacks
 * that operate on objects.
 * @param newval container object holding the proposed changes
 * to apply to the current config, depending on
 * the editop value. Will not be NULL.
 * @param curval current container values from the "<running>"
 * or "<candidate>" configuration, if any. Could be NULL
 * for create and other operations.
 * @param k_dot1q_name Ancestor key leaf 'name' in list 'bridge'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:name
 * @param k_dot1q_name_1 Ancestor key leaf 'name' in list 'component'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:name
 * @param k_dot1q_database_id_2 Ancestor key leaf 'database-id' in list 'filtering-entry'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:permanent-database/dot1q:filtering-entry/dot1q:database-id
 * @param k_dot1q_vids_2 Ancestor key leaf 'vids' in list 'filtering-entry'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:permanent-database/dot1q:filtering-entry/dot1q:vids
 * @param k_dot1q_address_4 Ancestor key leaf 'address' in list 'filtering-entry'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:permanent-database/dot1q:filtering-entry/dot1q:address
 * @param k_dot1q_port_ref_2 Ancestor key leaf 'port-ref' in list 'port-map'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:permanent-database/dot1q:filtering-entry/dot1q:port-map/dot1q:port-ref
 * @return return status for the phase.
 */
extern status_t u_dot1q_static_vlan_registration_entries_7_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_dot1q_name,
    const xmlChar *k_dot1q_name_1,
    uint32 k_dot1q_database_id_2,
    const xmlChar *k_dot1q_vids_2,
    const xmlChar *k_dot1q_address_4,
    uint32 k_dot1q_port_ref_2);


/**
 * @brief Edit database object callback (agt_cb_fn_t)\n
 * Path: container /bridges/bridge/component/permanent-database/filtering-entry/port-map/map-type/mac-address-registration-entries/mac-address-registration-entries
 *
 * @param scb session control block making the request
 * @param msg message in progress for this edit request
 * @param cbtyp callback type for this callback
 * @param editop the parent edit-config operation type,
 * which is also used for all other callbacks
 * that operate on objects.
 * @param newval container object holding the proposed changes
 * to apply to the current config, depending on
 * the editop value. Will not be NULL.
 * @param curval current container values from the "<running>"
 * or "<candidate>" configuration, if any. Could be NULL
 * for create and other operations.
 * @param k_dot1q_name Ancestor key leaf 'name' in list 'bridge'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:name
 * @param k_dot1q_name_1 Ancestor key leaf 'name' in list 'component'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:name
 * @param k_dot1q_database_id_2 Ancestor key leaf 'database-id' in list 'filtering-entry'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:permanent-database/dot1q:filtering-entry/dot1q:database-id
 * @param k_dot1q_vids_2 Ancestor key leaf 'vids' in list 'filtering-entry'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:permanent-database/dot1q:filtering-entry/dot1q:vids
 * @param k_dot1q_address_4 Ancestor key leaf 'address' in list 'filtering-entry'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:permanent-database/dot1q:filtering-entry/dot1q:address
 * @param k_dot1q_port_ref_2 Ancestor key leaf 'port-ref' in list 'port-map'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:permanent-database/dot1q:filtering-entry/dot1q:port-map/dot1q:port-ref
 * @return return status for the phase.
 */
extern status_t u_dot1q_mac_address_registration_entries_6_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_dot1q_name,
    const xmlChar *k_dot1q_name_1,
    uint32 k_dot1q_database_id_2,
    const xmlChar *k_dot1q_vids_2,
    const xmlChar *k_dot1q_address_4,
    uint32 k_dot1q_port_ref_2);


/**
 * @brief Edit database object callback (agt_cb_fn_t)\n
 * Path: container /bridges/bridge/component/permanent-database/filtering-entry/port-map/map-type/dynamic-vlan-registration-entries/dynamic-vlan-registration-entries
 *
 * @param scb session control block making the request
 * @param msg message in progress for this edit request
 * @param cbtyp callback type for this callback
 * @param editop the parent edit-config operation type,
 * which is also used for all other callbacks
 * that operate on objects.
 * @param newval container object holding the proposed changes
 * to apply to the current config, depending on
 * the editop value. Will not be NULL.
 * @param curval current container values from the "<running>"
 * or "<candidate>" configuration, if any. Could be NULL
 * for create and other operations.
 * @param k_dot1q_name Ancestor key leaf 'name' in list 'bridge'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:name
 * @param k_dot1q_name_1 Ancestor key leaf 'name' in list 'component'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:name
 * @param k_dot1q_database_id_2 Ancestor key leaf 'database-id' in list 'filtering-entry'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:permanent-database/dot1q:filtering-entry/dot1q:database-id
 * @param k_dot1q_vids_2 Ancestor key leaf 'vids' in list 'filtering-entry'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:permanent-database/dot1q:filtering-entry/dot1q:vids
 * @param k_dot1q_address_4 Ancestor key leaf 'address' in list 'filtering-entry'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:permanent-database/dot1q:filtering-entry/dot1q:address
 * @param k_dot1q_port_ref_2 Ancestor key leaf 'port-ref' in list 'port-map'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:permanent-database/dot1q:filtering-entry/dot1q:port-map/dot1q:port-ref
 * @return return status for the phase.
 */
extern status_t u_dot1q_dynamic_vlan_registration_entries_6_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_dot1q_name,
    const xmlChar *k_dot1q_name_1,
    uint32 k_dot1q_database_id_2,
    const xmlChar *k_dot1q_vids_2,
    const xmlChar *k_dot1q_address_4,
    uint32 k_dot1q_port_ref_2);


/**
 * @brief Edit database object callback (agt_cb_fn_t)\n
 * Path: container /bridges/bridge/component/permanent-database/filtering-entry/port-map/map-type/dynamic-reservation-entries/dynamic-reservation-entries
 *
 * @param scb session control block making the request
 * @param msg message in progress for this edit request
 * @param cbtyp callback type for this callback
 * @param editop the parent edit-config operation type,
 * which is also used for all other callbacks
 * that operate on objects.
 * @param newval container object holding the proposed changes
 * to apply to the current config, depending on
 * the editop value. Will not be NULL.
 * @param curval current container values from the "<running>"
 * or "<candidate>" configuration, if any. Could be NULL
 * for create and other operations.
 * @param k_dot1q_name Ancestor key leaf 'name' in list 'bridge'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:name
 * @param k_dot1q_name_1 Ancestor key leaf 'name' in list 'component'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:name
 * @param k_dot1q_database_id_2 Ancestor key leaf 'database-id' in list 'filtering-entry'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:permanent-database/dot1q:filtering-entry/dot1q:database-id
 * @param k_dot1q_vids_2 Ancestor key leaf 'vids' in list 'filtering-entry'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:permanent-database/dot1q:filtering-entry/dot1q:vids
 * @param k_dot1q_address_4 Ancestor key leaf 'address' in list 'filtering-entry'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:permanent-database/dot1q:filtering-entry/dot1q:address
 * @param k_dot1q_port_ref_2 Ancestor key leaf 'port-ref' in list 'port-map'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:permanent-database/dot1q:filtering-entry/dot1q:port-map/dot1q:port-ref
 * @return return status for the phase.
 */
extern status_t u_dot1q_dynamic_reservation_entries_5_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_dot1q_name,
    const xmlChar *k_dot1q_name_1,
    uint32 k_dot1q_database_id_2,
    const xmlChar *k_dot1q_vids_2,
    const xmlChar *k_dot1q_address_4,
    uint32 k_dot1q_port_ref_2);


/**
 * @brief Edit database object callback (agt_cb_fn_t)\n
 * Path: container /bridges/bridge/component/permanent-database/filtering-entry/port-map/map-type/dynamic-filtering-entries/dynamic-filtering-entries
 *
 * @param scb session control block making the request
 * @param msg message in progress for this edit request
 * @param cbtyp callback type for this callback
 * @param editop the parent edit-config operation type,
 * which is also used for all other callbacks
 * that operate on objects.
 * @param newval container object holding the proposed changes
 * to apply to the current config, depending on
 * the editop value. Will not be NULL.
 * @param curval current container values from the "<running>"
 * or "<candidate>" configuration, if any. Could be NULL
 * for create and other operations.
 * @param k_dot1q_name Ancestor key leaf 'name' in list 'bridge'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:name
 * @param k_dot1q_name_1 Ancestor key leaf 'name' in list 'component'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:name
 * @param k_dot1q_database_id_2 Ancestor key leaf 'database-id' in list 'filtering-entry'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:permanent-database/dot1q:filtering-entry/dot1q:database-id
 * @param k_dot1q_vids_2 Ancestor key leaf 'vids' in list 'filtering-entry'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:permanent-database/dot1q:filtering-entry/dot1q:vids
 * @param k_dot1q_address_4 Ancestor key leaf 'address' in list 'filtering-entry'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:permanent-database/dot1q:filtering-entry/dot1q:address
 * @param k_dot1q_port_ref_2 Ancestor key leaf 'port-ref' in list 'port-map'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:permanent-database/dot1q:filtering-entry/dot1q:port-map/dot1q:port-ref
 * @return return status for the phase.
 */
extern status_t u_dot1q_dynamic_filtering_entries_5_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_dot1q_name,
    const xmlChar *k_dot1q_name_1,
    uint32 k_dot1q_database_id_2,
    const xmlChar *k_dot1q_vids_2,
    const xmlChar *k_dot1q_address_4,
    uint32 k_dot1q_port_ref_2);


/**
 * @brief Edit database object callback (agt_cb_fn_t)\n
 * Path: list /bridges/bridge/component/permanent-database/filtering-entry/port-map
 *
 * @param scb session control block making the request
 * @param msg message in progress for this edit request
 * @param cbtyp callback type for this callback
 * @param editop the parent edit-config operation type,
 * which is also used for all other callbacks
 * that operate on objects.
 * @param newval container object holding the proposed changes
 * to apply to the current config, depending on
 * the editop value. Will not be NULL.
 * @param curval current container values from the "<running>"
 * or "<candidate>" configuration, if any. Could be NULL
 * for create and other operations.
 * @param k_dot1q_name Ancestor key leaf 'name' in list 'bridge'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:name
 * @param k_dot1q_name_1 Ancestor key leaf 'name' in list 'component'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:name
 * @param k_dot1q_database_id_2 Ancestor key leaf 'database-id' in list 'filtering-entry'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:permanent-database/dot1q:filtering-entry/dot1q:database-id
 * @param k_dot1q_vids_2 Ancestor key leaf 'vids' in list 'filtering-entry'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:permanent-database/dot1q:filtering-entry/dot1q:vids
 * @param k_dot1q_address_4 Ancestor key leaf 'address' in list 'filtering-entry'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:permanent-database/dot1q:filtering-entry/dot1q:address
 * @param k_dot1q_port_ref_2 Local key leaf 'port-ref' in list 'port-map'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:permanent-database/dot1q:filtering-entry/dot1q:port-map/dot1q:port-ref
 * @return return status for the phase.
 */
extern status_t u_dot1q_port_map_2_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_dot1q_name,
    const xmlChar *k_dot1q_name_1,
    uint32 k_dot1q_database_id_2,
    const xmlChar *k_dot1q_vids_2,
    const xmlChar *k_dot1q_address_4,
    uint32 k_dot1q_port_ref_2);


/**
 * @brief Edit database object callback (agt_cb_fn_t)\n
 * Path: list /bridges/bridge/component/permanent-database/filtering-entry
 *
 * @param scb session control block making the request
 * @param msg message in progress for this edit request
 * @param cbtyp callback type for this callback
 * @param editop the parent edit-config operation type,
 * which is also used for all other callbacks
 * that operate on objects.
 * @param newval container object holding the proposed changes
 * to apply to the current config, depending on
 * the editop value. Will not be NULL.
 * @param curval current container values from the "<running>"
 * or "<candidate>" configuration, if any. Could be NULL
 * for create and other operations.
 * @param k_dot1q_name Ancestor key leaf 'name' in list 'bridge'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:name
 * @param k_dot1q_name_1 Ancestor key leaf 'name' in list 'component'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:name
 * @param k_dot1q_database_id_2 Local key leaf 'database-id' in list 'filtering-entry'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:permanent-database/dot1q:filtering-entry/dot1q:database-id
 * @param k_dot1q_vids_2 Local key leaf 'vids' in list 'filtering-entry'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:permanent-database/dot1q:filtering-entry/dot1q:vids
 * @param k_dot1q_address_4 Local key leaf 'address' in list 'filtering-entry'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:permanent-database/dot1q:filtering-entry/dot1q:address
 * @return return status for the phase.
 */
extern status_t u_dot1q_filtering_entry_1_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_dot1q_name,
    const xmlChar *k_dot1q_name_1,
    uint32 k_dot1q_database_id_2,
    const xmlChar *k_dot1q_vids_2,
    const xmlChar *k_dot1q_address_4);


/**
 * @brief Edit database object callback (agt_cb_fn_t)\n
 * Path: container /bridges/bridge/component/permanent-database
 *
 * @param scb session control block making the request
 * @param msg message in progress for this edit request
 * @param cbtyp callback type for this callback
 * @param editop the parent edit-config operation type,
 * which is also used for all other callbacks
 * that operate on objects.
 * @param newval container object holding the proposed changes
 * to apply to the current config, depending on
 * the editop value. Will not be NULL.
 * @param curval current container values from the "<running>"
 * or "<candidate>" configuration, if any. Could be NULL
 * for create and other operations.
 * @param k_dot1q_name Ancestor key leaf 'name' in list 'bridge'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:name
 * @param k_dot1q_name_1 Ancestor key leaf 'name' in list 'component'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:name
 * @return return status for the phase.
 */
extern status_t u_dot1q_permanent_database_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_dot1q_name,
    const xmlChar *k_dot1q_name_1);


/**
 * @brief Get database object callback for leaf version (getcb_fn2_t)\n
 * Path: leaf /bridges/bridge/component/bridge-vlan/version\n
 *
 * Fill in 'get2cb' response fields.
 *
 * @param get2cb GET2 control block for the callback.
 * @param k_dot1q_name Ancestor key leaf 'name' in list 'bridge'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:name
 * @param k_dot1q_name_1 Ancestor key leaf 'name' in list 'component'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:name
 * @return return status of the callback.
 */
extern status_t u_dot1q_version_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_dot1q_name,
    const xmlChar *k_dot1q_name_1);


/**
 * @brief Get database object callback for leaf max-vids (getcb_fn2_t)\n
 * Path: leaf /bridges/bridge/component/bridge-vlan/max-vids\n
 *
 * Fill in 'get2cb' response fields.
 *
 * @param get2cb GET2 control block for the callback.
 * @param k_dot1q_name Ancestor key leaf 'name' in list 'bridge'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:name
 * @param k_dot1q_name_1 Ancestor key leaf 'name' in list 'component'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:name
 * @return return status of the callback.
 */
extern status_t u_dot1q_max_vids_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_dot1q_name,
    const xmlChar *k_dot1q_name_1);


/**
 * @brief Get database object callback for leaf override-default-pvid (getcb_fn2_t)\n
 * Path: leaf /bridges/bridge/component/bridge-vlan/override-default-pvid\n
 *
 * Fill in 'get2cb' response fields.
 *
 * @param get2cb GET2 control block for the callback.
 * @param k_dot1q_name Ancestor key leaf 'name' in list 'bridge'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:name
 * @param k_dot1q_name_1 Ancestor key leaf 'name' in list 'component'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:name
 * @return return status of the callback.
 */
extern status_t u_dot1q_override_default_pvid_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_dot1q_name,
    const xmlChar *k_dot1q_name_1);


#ifdef u_dot1q_F_port_and_protocol_based_vlan

/**
 * @brief Get database object callback for leaf protocol-template (getcb_fn2_t)\n
 * Path: leaf /bridges/bridge/component/bridge-vlan/protocol-template\n
 *
 * Fill in 'get2cb' response fields.
 *
 * @param get2cb GET2 control block for the callback.
 * @param k_dot1q_name Ancestor key leaf 'name' in list 'bridge'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:name
 * @param k_dot1q_name_1 Ancestor key leaf 'name' in list 'component'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:name
 * @return return status of the callback.
 */
extern status_t u_dot1q_protocol_template_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_dot1q_name,
    const xmlChar *k_dot1q_name_1);

#endif /* u_dot1q_F_port_and_protocol_based_vlan */


/**
 * @brief Get database object callback for leaf max-msti (getcb_fn2_t)\n
 * Path: leaf /bridges/bridge/component/bridge-vlan/max-msti\n
 *
 * Fill in 'get2cb' response fields.
 *
 * @param get2cb GET2 control block for the callback.
 * @param k_dot1q_name Ancestor key leaf 'name' in list 'bridge'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:name
 * @param k_dot1q_name_1 Ancestor key leaf 'name' in list 'component'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:name
 * @return return status of the callback.
 */
extern status_t u_dot1q_max_msti_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_dot1q_name,
    const xmlChar *k_dot1q_name_1);


/**
 * @brief Get database object callback for leaf-list untagged-ports (getcb_fn2_t)\n
 * Path: leaf-list /bridges/bridge/component/bridge-vlan/vlan/untagged-ports\n
 *
 * Fill in 'get2cb' response fields.
 *
 * @param get2cb GET2 control block for the callback.
 * @param k_dot1q_name Ancestor key leaf 'name' in list 'bridge'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:name
 * @param k_dot1q_name_1 Ancestor key leaf 'name' in list 'component'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:name
 * @param k_dot1q_vid_1 Ancestor key leaf 'vid' in list 'vlan'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:bridge-vlan/dot1q:vlan/dot1q:vid
 * @return return status of the callback.
 */
extern status_t u_dot1q_untagged_ports_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_dot1q_name,
    const xmlChar *k_dot1q_name_1,
    uint32 k_dot1q_vid_1);


/**
 * @brief Get database object callback for leaf-list egress-ports (getcb_fn2_t)\n
 * Path: leaf-list /bridges/bridge/component/bridge-vlan/vlan/egress-ports\n
 *
 * Fill in 'get2cb' response fields.
 *
 * @param get2cb GET2 control block for the callback.
 * @param k_dot1q_name Ancestor key leaf 'name' in list 'bridge'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:name
 * @param k_dot1q_name_1 Ancestor key leaf 'name' in list 'component'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:name
 * @param k_dot1q_vid_1 Ancestor key leaf 'vid' in list 'vlan'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:bridge-vlan/dot1q:vlan/dot1q:vid
 * @return return status of the callback.
 */
extern status_t u_dot1q_egress_ports_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_dot1q_name,
    const xmlChar *k_dot1q_name_1,
    uint32 k_dot1q_vid_1);


/**
 * @brief Edit database object callback (agt_cb_fn_t)\n
 * Path: list /bridges/bridge/component/bridge-vlan/vlan
 *
 * @param scb session control block making the request
 * @param msg message in progress for this edit request
 * @param cbtyp callback type for this callback
 * @param editop the parent edit-config operation type,
 * which is also used for all other callbacks
 * that operate on objects.
 * @param newval container object holding the proposed changes
 * to apply to the current config, depending on
 * the editop value. Will not be NULL.
 * @param curval current container values from the "<running>"
 * or "<candidate>" configuration, if any. Could be NULL
 * for create and other operations.
 * @param k_dot1q_name Ancestor key leaf 'name' in list 'bridge'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:name
 * @param k_dot1q_name_1 Ancestor key leaf 'name' in list 'component'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:name
 * @param k_dot1q_vid_1 Local key leaf 'vid' in list 'vlan'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:bridge-vlan/dot1q:vlan/dot1q:vid
 * @return return status for the phase.
 */
extern status_t u_dot1q_vlan_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_dot1q_name,
    const xmlChar *k_dot1q_name_1,
    uint32 k_dot1q_vid_1);


#ifdef u_dot1q_F_port_and_protocol_based_vlan

/**
 * @brief Edit database object callback (agt_cb_fn_t)\n
 * Path: container /bridges/bridge/component/bridge-vlan/protocol-group-database/frame-format/llc-other/dsap-ssap-pairs
 *
 * @param scb session control block making the request
 * @param msg message in progress for this edit request
 * @param cbtyp callback type for this callback
 * @param editop the parent edit-config operation type,
 * which is also used for all other callbacks
 * that operate on objects.
 * @param newval container object holding the proposed changes
 * to apply to the current config, depending on
 * the editop value. Will not be NULL.
 * @param curval current container values from the "<running>"
 * or "<candidate>" configuration, if any. Could be NULL
 * for create and other operations.
 * @param k_dot1q_name Ancestor key leaf 'name' in list 'bridge'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:name
 * @param k_dot1q_name_1 Ancestor key leaf 'name' in list 'component'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:name
 * @param k_dot1q_db_index Ancestor key leaf 'db-index' in list 'protocol-group-database'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:bridge-vlan/dot1q:protocol-group-database/dot1q:db-index
 * @return return status for the phase.
 */
extern status_t u_dot1q_dsap_ssap_pairs_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_dot1q_name,
    const xmlChar *k_dot1q_name_1,
    uint16 k_dot1q_db_index);

/**
 * @brief Edit database object callback (agt_cb_fn_t)\n
 * Path: list /bridges/bridge/component/bridge-vlan/protocol-group-database
 *
 * @param scb session control block making the request
 * @param msg message in progress for this edit request
 * @param cbtyp callback type for this callback
 * @param editop the parent edit-config operation type,
 * which is also used for all other callbacks
 * that operate on objects.
 * @param newval container object holding the proposed changes
 * to apply to the current config, depending on
 * the editop value. Will not be NULL.
 * @param curval current container values from the "<running>"
 * or "<candidate>" configuration, if any. Could be NULL
 * for create and other operations.
 * @param k_dot1q_name Ancestor key leaf 'name' in list 'bridge'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:name
 * @param k_dot1q_name_1 Ancestor key leaf 'name' in list 'component'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:name
 * @param k_dot1q_db_index Local key leaf 'db-index' in list 'protocol-group-database'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:bridge-vlan/dot1q:protocol-group-database/dot1q:db-index
 * @return return status for the phase.
 */
extern status_t u_dot1q_protocol_group_database_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_dot1q_name,
    const xmlChar *k_dot1q_name_1,
    uint16 k_dot1q_db_index);

#endif /* u_dot1q_F_port_and_protocol_based_vlan */


/**
 * @brief Get database object callback for leaf fid (getcb_fn2_t)\n
 * Path: leaf /bridges/bridge/component/bridge-vlan/vid-to-fid-allocation/fid\n
 *
 * Fill in 'get2cb' response fields.
 *
 * @param get2cb GET2 control block for the callback.
 * @param k_dot1q_name Ancestor key leaf 'name' in list 'bridge'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:name
 * @param k_dot1q_name_1 Ancestor key leaf 'name' in list 'component'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:name
 * @param k_dot1q_vids_3 Ancestor key leaf 'vids' in list 'vid-to-fid-allocation'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:bridge-vlan/dot1q:vid-to-fid-allocation/dot1q:vids
 * @return return status of the callback.
 */
extern status_t u_dot1q_fid_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_dot1q_name,
    const xmlChar *k_dot1q_name_1,
    const xmlChar *k_dot1q_vids_3);


/**
 * @brief Get database object callback for leaf allocation-type (getcb_fn2_t)\n
 * Path: leaf /bridges/bridge/component/bridge-vlan/vid-to-fid-allocation/allocation-type\n
 *
 * Fill in 'get2cb' response fields.
 *
 * @param get2cb GET2 control block for the callback.
 * @param k_dot1q_name Ancestor key leaf 'name' in list 'bridge'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:name
 * @param k_dot1q_name_1 Ancestor key leaf 'name' in list 'component'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:name
 * @param k_dot1q_vids_3 Ancestor key leaf 'vids' in list 'vid-to-fid-allocation'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:bridge-vlan/dot1q:vid-to-fid-allocation/dot1q:vids
 * @return return status of the callback.
 */
extern status_t u_dot1q_allocation_type_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_dot1q_name,
    const xmlChar *k_dot1q_name_1,
    const xmlChar *k_dot1q_vids_3);


/**
 * @brief Edit database object callback (agt_cb_fn_t)\n
 * Path: list /bridges/bridge/component/bridge-vlan/vid-to-fid-allocation
 *
 * @param scb session control block making the request
 * @param msg message in progress for this edit request
 * @param cbtyp callback type for this callback
 * @param editop the parent edit-config operation type,
 * which is also used for all other callbacks
 * that operate on objects.
 * @param newval container object holding the proposed changes
 * to apply to the current config, depending on
 * the editop value. Will not be NULL.
 * @param curval current container values from the "<running>"
 * or "<candidate>" configuration, if any. Could be NULL
 * for create and other operations.
 * @param k_dot1q_name Ancestor key leaf 'name' in list 'bridge'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:name
 * @param k_dot1q_name_1 Ancestor key leaf 'name' in list 'component'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:name
 * @param k_dot1q_vids_3 Local key leaf 'vids' in list 'vid-to-fid-allocation'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:bridge-vlan/dot1q:vid-to-fid-allocation/dot1q:vids
 * @return return status for the phase.
 */
extern status_t u_dot1q_vid_to_fid_allocation_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_dot1q_name,
    const xmlChar *k_dot1q_name_1,
    const xmlChar *k_dot1q_vids_3);


/**
 * @brief Get database object callback for leaf allocation-type (getcb_fn2_t)\n
 * Path: leaf /bridges/bridge/component/bridge-vlan/fid-to-vid-allocation/allocation-type\n
 *
 * Fill in 'get2cb' response fields.
 *
 * @param get2cb GET2 control block for the callback.
 * @param k_dot1q_name Ancestor key leaf 'name' in list 'bridge'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:name
 * @param k_dot1q_name_1 Ancestor key leaf 'name' in list 'component'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:name
 * @param k_dot1q_fid_1 Ancestor key leaf 'fid' in list 'fid-to-vid-allocation'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:bridge-vlan/dot1q:fid-to-vid-allocation/dot1q:fid
 * @return return status of the callback.
 */
extern status_t u_dot1q_allocation_type_1_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_dot1q_name,
    const xmlChar *k_dot1q_name_1,
    uint32 k_dot1q_fid_1);


/**
 * @brief Get database object callback for leaf-list vid (getcb_fn2_t)\n
 * Path: leaf-list /bridges/bridge/component/bridge-vlan/fid-to-vid-allocation/vid\n
 *
 * Fill in 'get2cb' response fields.
 *
 * @param get2cb GET2 control block for the callback.
 * @param k_dot1q_name Ancestor key leaf 'name' in list 'bridge'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:name
 * @param k_dot1q_name_1 Ancestor key leaf 'name' in list 'component'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:name
 * @param k_dot1q_fid_1 Ancestor key leaf 'fid' in list 'fid-to-vid-allocation'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:bridge-vlan/dot1q:fid-to-vid-allocation/dot1q:fid
 * @return return status of the callback.
 */
extern status_t u_dot1q_vid_2_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_dot1q_name,
    const xmlChar *k_dot1q_name_1,
    uint32 k_dot1q_fid_1);


/**
 * @brief Edit database object callback (agt_cb_fn_t)\n
 * Path: list /bridges/bridge/component/bridge-vlan/fid-to-vid-allocation
 *
 * @param scb session control block making the request
 * @param msg message in progress for this edit request
 * @param cbtyp callback type for this callback
 * @param editop the parent edit-config operation type,
 * which is also used for all other callbacks
 * that operate on objects.
 * @param newval container object holding the proposed changes
 * to apply to the current config, depending on
 * the editop value. Will not be NULL.
 * @param curval current container values from the "<running>"
 * or "<candidate>" configuration, if any. Could be NULL
 * for create and other operations.
 * @param k_dot1q_name Ancestor key leaf 'name' in list 'bridge'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:name
 * @param k_dot1q_name_1 Ancestor key leaf 'name' in list 'component'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:name
 * @param k_dot1q_fid_1 Local key leaf 'fid' in list 'fid-to-vid-allocation'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:bridge-vlan/dot1q:fid-to-vid-allocation/dot1q:fid
 * @return return status for the phase.
 */
extern status_t u_dot1q_fid_to_vid_allocation_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_dot1q_name,
    const xmlChar *k_dot1q_name_1,
    uint32 k_dot1q_fid_1);


/**
 * @brief Edit database object callback (agt_cb_fn_t)\n
 * Path: list /bridges/bridge/component/bridge-vlan/vid-to-fid
 *
 * @param scb session control block making the request
 * @param msg message in progress for this edit request
 * @param cbtyp callback type for this callback
 * @param editop the parent edit-config operation type,
 * which is also used for all other callbacks
 * that operate on objects.
 * @param newval container object holding the proposed changes
 * to apply to the current config, depending on
 * the editop value. Will not be NULL.
 * @param curval current container values from the "<running>"
 * or "<candidate>" configuration, if any. Could be NULL
 * for create and other operations.
 * @param k_dot1q_name Ancestor key leaf 'name' in list 'bridge'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:name
 * @param k_dot1q_name_1 Ancestor key leaf 'name' in list 'component'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:name
 * @param k_dot1q_vid_3 Local key leaf 'vid' in list 'vid-to-fid'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:bridge-vlan/dot1q:vid-to-fid/dot1q:vid
 * @return return status for the phase.
 */
extern status_t u_dot1q_vid_to_fid_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_dot1q_name,
    const xmlChar *k_dot1q_name_1,
    uint32 k_dot1q_vid_3);


/**
 * @brief Edit database object callback (agt_cb_fn_t)\n
 * Path: container /bridges/bridge/component/bridge-vlan
 *
 * @param scb session control block making the request
 * @param msg message in progress for this edit request
 * @param cbtyp callback type for this callback
 * @param editop the parent edit-config operation type,
 * which is also used for all other callbacks
 * that operate on objects.
 * @param newval container object holding the proposed changes
 * to apply to the current config, depending on
 * the editop value. Will not be NULL.
 * @param curval current container values from the "<running>"
 * or "<candidate>" configuration, if any. Could be NULL
 * for create and other operations.
 * @param k_dot1q_name Ancestor key leaf 'name' in list 'bridge'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:name
 * @param k_dot1q_name_1 Ancestor key leaf 'name' in list 'component'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:name
 * @return return status for the phase.
 */
extern status_t u_dot1q_bridge_vlan_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_dot1q_name,
    const xmlChar *k_dot1q_name_1);


/**
 * @brief Edit database object callback (agt_cb_fn_t)\n
 * Path: list /bridges/bridge/component/bridge-mst/fid-to-mstid
 *
 * @param scb session control block making the request
 * @param msg message in progress for this edit request
 * @param cbtyp callback type for this callback
 * @param editop the parent edit-config operation type,
 * which is also used for all other callbacks
 * that operate on objects.
 * @param newval container object holding the proposed changes
 * to apply to the current config, depending on
 * the editop value. Will not be NULL.
 * @param curval current container values from the "<running>"
 * or "<candidate>" configuration, if any. Could be NULL
 * for create and other operations.
 * @param k_dot1q_name Ancestor key leaf 'name' in list 'bridge'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:name
 * @param k_dot1q_name_1 Ancestor key leaf 'name' in list 'component'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:name
 * @param k_dot1q_fid_3 Local key leaf 'fid' in list 'fid-to-mstid'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:bridge-mst/dot1q:fid-to-mstid/dot1q:fid
 * @return return status for the phase.
 */
extern status_t u_dot1q_fid_to_mstid_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_dot1q_name,
    const xmlChar *k_dot1q_name_1,
    uint32 k_dot1q_fid_3);


/**
 * @brief Edit database object callback (agt_cb_fn_t)\n
 * Path: list /bridges/bridge/component/bridge-mst/fid-to-mstid-allocation
 *
 * @param scb session control block making the request
 * @param msg message in progress for this edit request
 * @param cbtyp callback type for this callback
 * @param editop the parent edit-config operation type,
 * which is also used for all other callbacks
 * that operate on objects.
 * @param newval container object holding the proposed changes
 * to apply to the current config, depending on
 * the editop value. Will not be NULL.
 * @param curval current container values from the "<running>"
 * or "<candidate>" configuration, if any. Could be NULL
 * for create and other operations.
 * @param k_dot1q_name Ancestor key leaf 'name' in list 'bridge'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:name
 * @param k_dot1q_name_1 Ancestor key leaf 'name' in list 'component'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:name
 * @param k_dot1q_fids Local key leaf 'fids' in list 'fid-to-mstid-allocation'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:bridge-mst/dot1q:fid-to-mstid-allocation/dot1q:fids
 * @return return status for the phase.
 */
extern status_t u_dot1q_fid_to_mstid_allocation_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_dot1q_name,
    const xmlChar *k_dot1q_name_1,
    const xmlChar *k_dot1q_fids);


/**
 * @brief Edit database object callback (agt_cb_fn_t)\n
 * Path: container /bridges/bridge/component/bridge-mst
 *
 * @param scb session control block making the request
 * @param msg message in progress for this edit request
 * @param cbtyp callback type for this callback
 * @param editop the parent edit-config operation type,
 * which is also used for all other callbacks
 * that operate on objects.
 * @param newval container object holding the proposed changes
 * to apply to the current config, depending on
 * the editop value. Will not be NULL.
 * @param curval current container values from the "<running>"
 * or "<candidate>" configuration, if any. Could be NULL
 * for create and other operations.
 * @param k_dot1q_name Ancestor key leaf 'name' in list 'bridge'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:name
 * @param k_dot1q_name_1 Ancestor key leaf 'name' in list 'component'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:name
 * @return return status for the phase.
 */
extern status_t u_dot1q_bridge_mst_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_dot1q_name,
    const xmlChar *k_dot1q_name_1);


/**
 * @brief Edit database object callback (agt_cb_fn_t)\n
 * Path: list /bridges/bridge/component
 *
 * @param scb session control block making the request
 * @param msg message in progress for this edit request
 * @param cbtyp callback type for this callback
 * @param editop the parent edit-config operation type,
 * which is also used for all other callbacks
 * that operate on objects.
 * @param newval container object holding the proposed changes
 * to apply to the current config, depending on
 * the editop value. Will not be NULL.
 * @param curval current container values from the "<running>"
 * or "<candidate>" configuration, if any. Could be NULL
 * for create and other operations.
 * @param k_dot1q_name Ancestor key leaf 'name' in list 'bridge'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:name
 * @param k_dot1q_name_1 Local key leaf 'name' in list 'component'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:name
 * @return return status for the phase.
 */
extern status_t u_dot1q_component_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_dot1q_name,
    const xmlChar *k_dot1q_name_1);


/**
 * @brief Edit database object callback (agt_cb_fn_t)\n
 * Path: list /bridges/bridge
 *
 * @param scb session control block making the request
 * @param msg message in progress for this edit request
 * @param cbtyp callback type for this callback
 * @param editop the parent edit-config operation type,
 * which is also used for all other callbacks
 * that operate on objects.
 * @param newval container object holding the proposed changes
 * to apply to the current config, depending on
 * the editop value. Will not be NULL.
 * @param curval current container values from the "<running>"
 * or "<candidate>" configuration, if any. Could be NULL
 * for create and other operations.
 * @param k_dot1q_name Local key leaf 'name' in list 'bridge'\n
 * Path: /dot1q:bridges/dot1q:bridge/dot1q:name
 * @return return status for the phase.
 */
extern status_t u_dot1q_bridge_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_dot1q_name);


/**
 * @brief Edit database object callback (agt_cb_fn_t)\n
 * Path: container /bridges
 *
 * @param scb session control block making the request
 * @param msg message in progress for this edit request
 * @param cbtyp callback type for this callback
 * @param editop the parent edit-config operation type,
 * which is also used for all other callbacks
 * that operate on objects.
 * @param newval container object holding the proposed changes
 * to apply to the current config, depending on
 * the editop value. Will not be NULL.
 * @param curval current container values from the "<running>"
 * or "<candidate>" configuration, if any. Could be NULL
 * for create and other operations.
 * @return return status for the phase.
 */
extern status_t u_dot1q_bridges_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval);


/**
 * @brief Phase 1: Initialize the ieee802-dot1q-bridge server instrumentation library.
 *
 * Called by server when module is loaded.
 *
 * @param modname requested module name to load
 * @param revision requested revision date of the module to load.
 * This may be NULL if the module has no revision statements.
 * @return return status. An error will cause the module load to fail.
 */
extern status_t u_ieee802_dot1q_bridge_init (
    const xmlChar *modname,
    const xmlChar *revision);


/**
 * @brief Phase 2: Initialize the ieee802-dot1q-bridge server instrumentation library.
 *
 * SIL init phase 2: non-config data structures.
 * Called after running config is loaded.
 *
 * @return return status. An error will cause the
 * server initialization to fail.
 */
extern status_t u_ieee802_dot1q_bridge_init2 (void);


/**
 * @brief Cleanup the ieee802-dot1q-bridge server instrumentation library.
 *
 * Called by server when module is unloaded.
 *
 */
extern void u_ieee802_dot1q_bridge_cleanup (void);


 /** @} */

#ifdef __cplusplus
} /* end extern 'C' */
#endif

#endif
