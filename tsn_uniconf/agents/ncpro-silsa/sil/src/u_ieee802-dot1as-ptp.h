/*
 * Copyright (c) 2023 Texas Instruments Incorporated
 * Copyright (c) 2023 Excelfore Corporation (https://excelfore.com)
 *
 * All rights reserved not granted herein.
 * Limited License.
 *
 * Texas Instruments Incorporated grants a world-wide, royalty-free,
 * non-exclusive license under copyrights and patents it now or hereafter
 * owns or controls to make, have made, use, import, offer to sell and sell ("Utilize")
 * this software subject to the terms herein. With respect to the foregoing patent
 * license, such license is granted solely to the extent that any such patent is necessary
 * to Utilize the software alone. The patent license shall not apply to any combinations which
 * include this software, other than combinations with devices manufactured by or for TI ("TI Devices").
 * No hardware patent is licensed hereunder.
 *
 * Redistributions must preserve existing copyright notices and reproduce this license (including the
 * above copyright notice and the disclaimer and (if applicable) source code license limitations below)
 * in the documentation and/or other materials provided with the distribution
 *
 * Redistribution and use in binary form, without modification, are permitted provided that the following
 * conditions are met:
 *
 * * No reverse engineering, decompilation, or disassembly of this software is permitted with respect to any
 * software provided in binary form.
 * * any redistribution and use are licensed by TI for use only with TI Devices.
 * * Nothing shall obligate TI to provide you with source code for the software licensed and provided to you in object code.
 *
 * If software source code is provided to you, modification and redistribution of the source code are permitted
 * provided that the following conditions are met:
 *
 * * any redistribution and use of the source code, including any resulting derivative works, are licensed by
 * TI for use only with TI Devices.
 * * any redistribution and use of any object code compiled from the source code and any resulting derivative
 * works, are licensed by TI for use only with TI Devices.
 *
 * Neither the name of Texas Instruments Incorporated nor the names of its suppliers may be used to endorse or
 * promote products derived from this software without specific prior written permission.
 *
 * DISCLAIMER.
 *
 * THIS SOFTWARE IS PROVIDED BY TI AND TI"S LICENSORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL TI AND TI"S LICENSORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
*/

#ifndef _H_u_ieee802_dot1as_ptp
#define _H_u_ieee802_dot1as_ptp
/*
 * Copyright (c) 2008 - 2012, Andy Bierman, All Rights Reserved.
 * Copyright (c) 2012 - 2022, YumaWorks, Inc., All Rights Reserved.
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 */

/**
 * @file u_ieee802-dot1as-ptp.h
 * @brief User SIL-SA header for module ieee802-dot1as-ptp
 *

*** Generated by yangdump-sdk 21.10-12

<pre>

    User SIL-SA header
    bundle x4ucsilsa
    module ieee802-dot1as-ptp
    revision 2022-12-14
    prefix dot1as-ptp
    namespace urn:ieee:std:802.1AS:yang:ieee802-dot1as-ptp
    organization IEEE 802.1 Working Group
    Created: 2023-03-29T06:45:58Z

Online Developer Manual:
https://www.yumaworks.com/pub/21.10/dev/yumapro-dev-manual.html

    CLI parameters:
        defnames true
        deviation excelfore-interfaces
        deviation excelfore-gptp
        format uh
        indent 4
        module ietf-interfaces
        module ieee802-dot1q-bridge
        module ieee802-dot1q-tsn-config-uni
        module excelfore-interfaces
        module ieee1588-ptp
        module ieee802-dot1as-ptp
        module excelfore-gptp
        sil-bundle x4ucsilsa
        sil-edit2
        sil-get2
        sil-include tsn_uniconf/yangs/yang_db_access.h
        sil-include tsn_uniconf/yangs/yang_modules.h
        sil-sa
        unified true
</pre>

 */

#include <xmlstring.h>

#include "procdefs.h"
#include "agt.h"
#include "agt_cb.h"
#include "dlq.h"
#include "ncxtypes.h"
#include "op.h"
#include "rpc.h"
#include "ses.h"
#include "status.h"
#include "val.h"
#include "y_ieee802-dot1as-ptp.h"
#include "u_ietf-interfaces.h"
#include "u_ieee802-dot1q-bridge.h"
#include "u_ieee802-dot1q-tsn-config-uni.h"
#include "u_excelfore-interfaces.h"
#include "u_ieee1588-ptp.h"
#include "u_excelfore-gptp.h"

#ifdef __cplusplus
extern "C" {
#endif

/**
 * @addtogroup yang-library YANG Library
 *
 * Collection of modules supported by the server.
 * Generated by yangdump-sdk.
 */



/**
 * @addtogroup silsa-x4ucsilsa-ieee802-dot1as-ptp Module ieee802-dot1as-ptp in Bundle x4ucsilsa
 * @ingroup silsa-x4ucsilsa
 *
 * @{
 *
 * YANG instrumentation library.
 * Generated by yangdump-sdk.
 */



/* leaf-list /ptp/instances/instance/ports/port/port-ds/pdelay-truncated-timestamps */
typedef struct y_dot1as_ptp_T_pdelay_truncated_timestamps_ {
    dlq_hdr_t qhdr;
    uint64 ieee802_dot1as_ptp_pdelay_truncated_timestamps;
} y_dot1as_ptp_T_pdelay_truncated_timestamps;

/* container /ptp/instances/instance/ports/port/port-statistics-ds */
typedef struct y_dot1as_ptp_T_port_statistics_ds_ {
    uint32 v_rx_sync_count;
    uint32 v_rx_one_step_sync_count;
    uint32 v_rx_follow_up_count;
    uint32 v_rx_pdelay_req_count;
    uint32 v_rx_pdelay_resp_count;
    uint32 v_rx_pdelay_resp_follow_up_count;
    uint32 v_rx_announce_count;
    uint32 v_tx_sync_count;
    uint32 v_tx_follow_up_count;
    uint32 v_tx_pdelay_req_count;
    uint32 v_tx_pdelay_resp_count;
    uint32 v_tx_pdelay_resp_follow_up_count;
    uint32 v_tx_announce_count;
} y_dot1as_ptp_T_port_statistics_ds;


/**
 * @brief Get database object callback for leaf gm-capable (getcb_fn2_t)\n
 * Path: leaf /ptp/instances/instance/default-ds/gm-capable\n
 *
 * Fill in 'get2cb' response fields.
 *
 * @param get2cb GET2 control block for the callback.
 * @param k_ptp_instance_index Ancestor key leaf 'instance-index' in list 'instance'\n
 * Path: /ptp:ptp/ptp:instances/ptp:instance/ptp:instance-index
 * @return return status of the callback.
 */
extern status_t u_dot1as_ptp_gm_capable_get (
    getcb_get2_t *get2cb,
    uint32 k_ptp_instance_index);


/**
 * @brief Get database object callback for leaf current-utc-offset (getcb_fn2_t)\n
 * Path: leaf /ptp/instances/instance/default-ds/current-utc-offset\n
 *
 * Fill in 'get2cb' response fields.
 *
 * @param get2cb GET2 control block for the callback.
 * @param k_ptp_instance_index Ancestor key leaf 'instance-index' in list 'instance'\n
 * Path: /ptp:ptp/ptp:instances/ptp:instance/ptp:instance-index
 * @return return status of the callback.
 */
extern status_t u_dot1as_ptp_current_utc_offset_get (
    getcb_get2_t *get2cb,
    uint32 k_ptp_instance_index);


/**
 * @brief Get database object callback for leaf current-utc-offset-valid (getcb_fn2_t)\n
 * Path: leaf /ptp/instances/instance/default-ds/current-utc-offset-valid\n
 *
 * Fill in 'get2cb' response fields.
 *
 * @param get2cb GET2 control block for the callback.
 * @param k_ptp_instance_index Ancestor key leaf 'instance-index' in list 'instance'\n
 * Path: /ptp:ptp/ptp:instances/ptp:instance/ptp:instance-index
 * @return return status of the callback.
 */
extern status_t u_dot1as_ptp_current_utc_offset_valid_get (
    getcb_get2_t *get2cb,
    uint32 k_ptp_instance_index);


/**
 * @brief Get database object callback for leaf leap59 (getcb_fn2_t)\n
 * Path: leaf /ptp/instances/instance/default-ds/leap59\n
 *
 * Fill in 'get2cb' response fields.
 *
 * @param get2cb GET2 control block for the callback.
 * @param k_ptp_instance_index Ancestor key leaf 'instance-index' in list 'instance'\n
 * Path: /ptp:ptp/ptp:instances/ptp:instance/ptp:instance-index
 * @return return status of the callback.
 */
extern status_t u_dot1as_ptp_leap59_get (
    getcb_get2_t *get2cb,
    uint32 k_ptp_instance_index);


/**
 * @brief Get database object callback for leaf leap61 (getcb_fn2_t)\n
 * Path: leaf /ptp/instances/instance/default-ds/leap61\n
 *
 * Fill in 'get2cb' response fields.
 *
 * @param get2cb GET2 control block for the callback.
 * @param k_ptp_instance_index Ancestor key leaf 'instance-index' in list 'instance'\n
 * Path: /ptp:ptp/ptp:instances/ptp:instance/ptp:instance-index
 * @return return status of the callback.
 */
extern status_t u_dot1as_ptp_leap61_get (
    getcb_get2_t *get2cb,
    uint32 k_ptp_instance_index);


/**
 * @brief Get database object callback for leaf time-traceable (getcb_fn2_t)\n
 * Path: leaf /ptp/instances/instance/default-ds/time-traceable\n
 *
 * Fill in 'get2cb' response fields.
 *
 * @param get2cb GET2 control block for the callback.
 * @param k_ptp_instance_index Ancestor key leaf 'instance-index' in list 'instance'\n
 * Path: /ptp:ptp/ptp:instances/ptp:instance/ptp:instance-index
 * @return return status of the callback.
 */
extern status_t u_dot1as_ptp_time_traceable_get (
    getcb_get2_t *get2cb,
    uint32 k_ptp_instance_index);


/**
 * @brief Get database object callback for leaf frequency-traceable (getcb_fn2_t)\n
 * Path: leaf /ptp/instances/instance/default-ds/frequency-traceable\n
 *
 * Fill in 'get2cb' response fields.
 *
 * @param get2cb GET2 control block for the callback.
 * @param k_ptp_instance_index Ancestor key leaf 'instance-index' in list 'instance'\n
 * Path: /ptp:ptp/ptp:instances/ptp:instance/ptp:instance-index
 * @return return status of the callback.
 */
extern status_t u_dot1as_ptp_frequency_traceable_get (
    getcb_get2_t *get2cb,
    uint32 k_ptp_instance_index);


/**
 * @brief Get database object callback for leaf ptp-timescale (getcb_fn2_t)\n
 * Path: leaf /ptp/instances/instance/default-ds/ptp-timescale\n
 *
 * Fill in 'get2cb' response fields.
 *
 * @param get2cb GET2 control block for the callback.
 * @param k_ptp_instance_index Ancestor key leaf 'instance-index' in list 'instance'\n
 * Path: /ptp:ptp/ptp:instances/ptp:instance/ptp:instance-index
 * @return return status of the callback.
 */
extern status_t u_dot1as_ptp_ptp_timescale_get (
    getcb_get2_t *get2cb,
    uint32 k_ptp_instance_index);


/**
 * @brief Get database object callback for leaf time-source (getcb_fn2_t)\n
 * Path: leaf /ptp/instances/instance/default-ds/time-source\n
 *
 * Fill in 'get2cb' response fields.
 *
 * @param get2cb GET2 control block for the callback.
 * @param k_ptp_instance_index Ancestor key leaf 'instance-index' in list 'instance'\n
 * Path: /ptp:ptp/ptp:instances/ptp:instance/ptp:instance-index
 * @return return status of the callback.
 */
extern status_t u_dot1as_ptp_time_source_get (
    getcb_get2_t *get2cb,
    uint32 k_ptp_instance_index);


/**
 * @brief Get database object callback for leaf is-measuring-delay (getcb_fn2_t)\n
 * Path: leaf /ptp/instances/instance/ports/port/port-ds/is-measuring-delay\n
 *
 * Fill in 'get2cb' response fields.
 *
 * @param get2cb GET2 control block for the callback.
 * @param k_ptp_instance_index Ancestor key leaf 'instance-index' in list 'instance'\n
 * Path: /ptp:ptp/ptp:instances/ptp:instance/ptp:instance-index
 * @param k_ptp_port_index Ancestor key leaf 'port-index' in list 'port'\n
 * Path: /ptp:ptp/ptp:instances/ptp:instance/ptp:ports/ptp:port/ptp:port-index
 * @return return status of the callback.
 */
extern status_t u_dot1as_ptp_is_measuring_delay_get (
    getcb_get2_t *get2cb,
    uint32 k_ptp_instance_index,
    uint16 k_ptp_port_index);


/**
 * @brief Get database object callback for leaf as-capable (getcb_fn2_t)\n
 * Path: leaf /ptp/instances/instance/ports/port/port-ds/as-capable\n
 *
 * Fill in 'get2cb' response fields.
 *
 * @param get2cb GET2 control block for the callback.
 * @param k_ptp_instance_index Ancestor key leaf 'instance-index' in list 'instance'\n
 * Path: /ptp:ptp/ptp:instances/ptp:instance/ptp:instance-index
 * @param k_ptp_port_index Ancestor key leaf 'port-index' in list 'port'\n
 * Path: /ptp:ptp/ptp:instances/ptp:instance/ptp:ports/ptp:port/ptp:port-index
 * @return return status of the callback.
 */
extern status_t u_dot1as_ptp_as_capable_get (
    getcb_get2_t *get2cb,
    uint32 k_ptp_instance_index,
    uint16 k_ptp_port_index);


/**
 * @brief Get database object callback for leaf neighbor-rate-ratio (getcb_fn2_t)\n
 * Path: leaf /ptp/instances/instance/ports/port/port-ds/neighbor-rate-ratio\n
 *
 * Fill in 'get2cb' response fields.
 *
 * @param get2cb GET2 control block for the callback.
 * @param k_ptp_instance_index Ancestor key leaf 'instance-index' in list 'instance'\n
 * Path: /ptp:ptp/ptp:instances/ptp:instance/ptp:instance-index
 * @param k_ptp_port_index Ancestor key leaf 'port-index' in list 'port'\n
 * Path: /ptp:ptp/ptp:instances/ptp:instance/ptp:ports/ptp:port/ptp:port-index
 * @return return status of the callback.
 */
extern status_t u_dot1as_ptp_neighbor_rate_ratio_get (
    getcb_get2_t *get2cb,
    uint32 k_ptp_instance_index,
    uint16 k_ptp_port_index);


/**
 * @brief Get database object callback for leaf current-log-announce-interval (getcb_fn2_t)\n
 * Path: leaf /ptp/instances/instance/ports/port/port-ds/current-log-announce-interval\n
 *
 * Fill in 'get2cb' response fields.
 *
 * @param get2cb GET2 control block for the callback.
 * @param k_ptp_instance_index Ancestor key leaf 'instance-index' in list 'instance'\n
 * Path: /ptp:ptp/ptp:instances/ptp:instance/ptp:instance-index
 * @param k_ptp_port_index Ancestor key leaf 'port-index' in list 'port'\n
 * Path: /ptp:ptp/ptp:instances/ptp:instance/ptp:ports/ptp:port/ptp:port-index
 * @return return status of the callback.
 */
extern status_t u_dot1as_ptp_current_log_announce_interval_get (
    getcb_get2_t *get2cb,
    uint32 k_ptp_instance_index,
    uint16 k_ptp_port_index);


/**
 * @brief Get database object callback for leaf use-mgt-log-announce-interval (getcb_fn2_t)\n
 * Path: leaf /ptp/instances/instance/ports/port/port-ds/use-mgt-log-announce-interval\n
 *
 * Fill in 'get2cb' response fields.
 *
 * @param get2cb GET2 control block for the callback.
 * @param k_ptp_instance_index Ancestor key leaf 'instance-index' in list 'instance'\n
 * Path: /ptp:ptp/ptp:instances/ptp:instance/ptp:instance-index
 * @param k_ptp_port_index Ancestor key leaf 'port-index' in list 'port'\n
 * Path: /ptp:ptp/ptp:instances/ptp:instance/ptp:ports/ptp:port/ptp:port-index
 * @return return status of the callback.
 */
extern status_t u_dot1as_ptp_use_mgt_log_announce_interval_get (
    getcb_get2_t *get2cb,
    uint32 k_ptp_instance_index,
    uint16 k_ptp_port_index);


/**
 * @brief Get database object callback for leaf current-log-sync-interval (getcb_fn2_t)\n
 * Path: leaf /ptp/instances/instance/ports/port/port-ds/current-log-sync-interval\n
 *
 * Fill in 'get2cb' response fields.
 *
 * @param get2cb GET2 control block for the callback.
 * @param k_ptp_instance_index Ancestor key leaf 'instance-index' in list 'instance'\n
 * Path: /ptp:ptp/ptp:instances/ptp:instance/ptp:instance-index
 * @param k_ptp_port_index Ancestor key leaf 'port-index' in list 'port'\n
 * Path: /ptp:ptp/ptp:instances/ptp:instance/ptp:ports/ptp:port/ptp:port-index
 * @return return status of the callback.
 */
extern status_t u_dot1as_ptp_current_log_sync_interval_get (
    getcb_get2_t *get2cb,
    uint32 k_ptp_instance_index,
    uint16 k_ptp_port_index);


/**
 * @brief Get database object callback for leaf use-mgt-log-sync-interval (getcb_fn2_t)\n
 * Path: leaf /ptp/instances/instance/ports/port/port-ds/use-mgt-log-sync-interval\n
 *
 * Fill in 'get2cb' response fields.
 *
 * @param get2cb GET2 control block for the callback.
 * @param k_ptp_instance_index Ancestor key leaf 'instance-index' in list 'instance'\n
 * Path: /ptp:ptp/ptp:instances/ptp:instance/ptp:instance-index
 * @param k_ptp_port_index Ancestor key leaf 'port-index' in list 'port'\n
 * Path: /ptp:ptp/ptp:instances/ptp:instance/ptp:ports/ptp:port/ptp:port-index
 * @return return status of the callback.
 */
extern status_t u_dot1as_ptp_use_mgt_log_sync_interval_get (
    getcb_get2_t *get2cb,
    uint32 k_ptp_instance_index,
    uint16 k_ptp_port_index);


/**
 * @brief Get database object callback for leaf sync-receipt-timeout-interval (getcb_fn2_t)\n
 * Path: leaf /ptp/instances/instance/ports/port/port-ds/sync-receipt-timeout-interval\n
 *
 * Fill in 'get2cb' response fields.
 *
 * @param get2cb GET2 control block for the callback.
 * @param k_ptp_instance_index Ancestor key leaf 'instance-index' in list 'instance'\n
 * Path: /ptp:ptp/ptp:instances/ptp:instance/ptp:instance-index
 * @param k_ptp_port_index Ancestor key leaf 'port-index' in list 'port'\n
 * Path: /ptp:ptp/ptp:instances/ptp:instance/ptp:ports/ptp:port/ptp:port-index
 * @return return status of the callback.
 */
extern status_t u_dot1as_ptp_sync_receipt_timeout_interval_get (
    getcb_get2_t *get2cb,
    uint32 k_ptp_instance_index,
    uint16 k_ptp_port_index);


/**
 * @brief Get database object callback for leaf current-log-pdelay-req-interval (getcb_fn2_t)\n
 * Path: leaf /ptp/instances/instance/ports/port/port-ds/current-log-pdelay-req-interval\n
 *
 * Fill in 'get2cb' response fields.
 *
 * @param get2cb GET2 control block for the callback.
 * @param k_ptp_instance_index Ancestor key leaf 'instance-index' in list 'instance'\n
 * Path: /ptp:ptp/ptp:instances/ptp:instance/ptp:instance-index
 * @param k_ptp_port_index Ancestor key leaf 'port-index' in list 'port'\n
 * Path: /ptp:ptp/ptp:instances/ptp:instance/ptp:ports/ptp:port/ptp:port-index
 * @return return status of the callback.
 */
extern status_t u_dot1as_ptp_current_log_pdelay_req_interval_get (
    getcb_get2_t *get2cb,
    uint32 k_ptp_instance_index,
    uint16 k_ptp_port_index);


/**
 * @brief Get database object callback for leaf use-mgt-log-pdelay-req-interval (getcb_fn2_t)\n
 * Path: leaf /ptp/instances/instance/ports/port/port-ds/use-mgt-log-pdelay-req-interval\n
 *
 * Fill in 'get2cb' response fields.
 *
 * @param get2cb GET2 control block for the callback.
 * @param k_ptp_instance_index Ancestor key leaf 'instance-index' in list 'instance'\n
 * Path: /ptp:ptp/ptp:instances/ptp:instance/ptp:instance-index
 * @param k_ptp_port_index Ancestor key leaf 'port-index' in list 'port'\n
 * Path: /ptp:ptp/ptp:instances/ptp:instance/ptp:ports/ptp:port/ptp:port-index
 * @return return status of the callback.
 */
extern status_t u_dot1as_ptp_use_mgt_log_pdelay_req_interval_get (
    getcb_get2_t *get2cb,
    uint32 k_ptp_instance_index,
    uint16 k_ptp_port_index);


/**
 * @brief Get database object callback for leaf current-log-gptp-cap-interval (getcb_fn2_t)\n
 * Path: leaf /ptp/instances/instance/ports/port/port-ds/current-log-gptp-cap-interval\n
 *
 * Fill in 'get2cb' response fields.
 *
 * @param get2cb GET2 control block for the callback.
 * @param k_ptp_instance_index Ancestor key leaf 'instance-index' in list 'instance'\n
 * Path: /ptp:ptp/ptp:instances/ptp:instance/ptp:instance-index
 * @param k_ptp_port_index Ancestor key leaf 'port-index' in list 'port'\n
 * Path: /ptp:ptp/ptp:instances/ptp:instance/ptp:ports/ptp:port/ptp:port-index
 * @return return status of the callback.
 */
extern status_t u_dot1as_ptp_current_log_gptp_cap_interval_get (
    getcb_get2_t *get2cb,
    uint32 k_ptp_instance_index,
    uint16 k_ptp_port_index);


/**
 * @brief Get database object callback for leaf use-mgt-compute-rate-ratio (getcb_fn2_t)\n
 * Path: leaf /ptp/instances/instance/ports/port/port-ds/use-mgt-compute-rate-ratio\n
 *
 * Fill in 'get2cb' response fields.
 *
 * @param get2cb GET2 control block for the callback.
 * @param k_ptp_instance_index Ancestor key leaf 'instance-index' in list 'instance'\n
 * Path: /ptp:ptp/ptp:instances/ptp:instance/ptp:instance-index
 * @param k_ptp_port_index Ancestor key leaf 'port-index' in list 'port'\n
 * Path: /ptp:ptp/ptp:instances/ptp:instance/ptp:ports/ptp:port/ptp:port-index
 * @return return status of the callback.
 */
extern status_t u_dot1as_ptp_use_mgt_compute_rate_ratio_get (
    getcb_get2_t *get2cb,
    uint32 k_ptp_instance_index,
    uint16 k_ptp_port_index);


/**
 * @brief Get database object callback for leaf use-mgt-compute-mean-link-delay (getcb_fn2_t)\n
 * Path: leaf /ptp/instances/instance/ports/port/port-ds/use-mgt-compute-mean-link-delay\n
 *
 * Fill in 'get2cb' response fields.
 *
 * @param get2cb GET2 control block for the callback.
 * @param k_ptp_instance_index Ancestor key leaf 'instance-index' in list 'instance'\n
 * Path: /ptp:ptp/ptp:instances/ptp:instance/ptp:instance-index
 * @param k_ptp_port_index Ancestor key leaf 'port-index' in list 'port'\n
 * Path: /ptp:ptp/ptp:instances/ptp:instance/ptp:ports/ptp:port/ptp:port-index
 * @return return status of the callback.
 */
extern status_t u_dot1as_ptp_use_mgt_compute_mean_link_delay_get (
    getcb_get2_t *get2cb,
    uint32 k_ptp_instance_index,
    uint16 k_ptp_port_index);


/**
 * @brief Get database object callback for leaf one-step-tx-oper (getcb_fn2_t)\n
 * Path: leaf /ptp/instances/instance/ports/port/port-ds/one-step-tx-oper\n
 *
 * Fill in 'get2cb' response fields.
 *
 * @param get2cb GET2 control block for the callback.
 * @param k_ptp_instance_index Ancestor key leaf 'instance-index' in list 'instance'\n
 * Path: /ptp:ptp/ptp:instances/ptp:instance/ptp:instance-index
 * @param k_ptp_port_index Ancestor key leaf 'port-index' in list 'port'\n
 * Path: /ptp:ptp/ptp:instances/ptp:instance/ptp:ports/ptp:port/ptp:port-index
 * @return return status of the callback.
 */
extern status_t u_dot1as_ptp_one_step_tx_oper_get (
    getcb_get2_t *get2cb,
    uint32 k_ptp_instance_index,
    uint16 k_ptp_port_index);


/**
 * @brief Get database object callback for leaf one-step-receive (getcb_fn2_t)\n
 * Path: leaf /ptp/instances/instance/ports/port/port-ds/one-step-receive\n
 *
 * Fill in 'get2cb' response fields.
 *
 * @param get2cb GET2 control block for the callback.
 * @param k_ptp_instance_index Ancestor key leaf 'instance-index' in list 'instance'\n
 * Path: /ptp:ptp/ptp:instances/ptp:instance/ptp:instance-index
 * @param k_ptp_port_index Ancestor key leaf 'port-index' in list 'port'\n
 * Path: /ptp:ptp/ptp:instances/ptp:instance/ptp:ports/ptp:port/ptp:port-index
 * @return return status of the callback.
 */
extern status_t u_dot1as_ptp_one_step_receive_get (
    getcb_get2_t *get2cb,
    uint32 k_ptp_instance_index,
    uint16 k_ptp_port_index);


/**
 * @brief Get database object callback for leaf one-step-transmit (getcb_fn2_t)\n
 * Path: leaf /ptp/instances/instance/ports/port/port-ds/one-step-transmit\n
 *
 * Fill in 'get2cb' response fields.
 *
 * @param get2cb GET2 control block for the callback.
 * @param k_ptp_instance_index Ancestor key leaf 'instance-index' in list 'instance'\n
 * Path: /ptp:ptp/ptp:instances/ptp:instance/ptp:instance-index
 * @param k_ptp_port_index Ancestor key leaf 'port-index' in list 'port'\n
 * Path: /ptp:ptp/ptp:instances/ptp:instance/ptp:ports/ptp:port/ptp:port-index
 * @return return status of the callback.
 */
extern status_t u_dot1as_ptp_one_step_transmit_get (
    getcb_get2_t *get2cb,
    uint32 k_ptp_instance_index,
    uint16 k_ptp_port_index);


/**
 * @brief Get database object callback for leaf initial-one-step-tx-oper (getcb_fn2_t)\n
 * Path: leaf /ptp/instances/instance/ports/port/port-ds/initial-one-step-tx-oper\n
 *
 * Fill in 'get2cb' response fields.
 *
 * @param get2cb GET2 control block for the callback.
 * @param k_ptp_instance_index Ancestor key leaf 'instance-index' in list 'instance'\n
 * Path: /ptp:ptp/ptp:instances/ptp:instance/ptp:instance-index
 * @param k_ptp_port_index Ancestor key leaf 'port-index' in list 'port'\n
 * Path: /ptp:ptp/ptp:instances/ptp:instance/ptp:ports/ptp:port/ptp:port-index
 * @return return status of the callback.
 */
extern status_t u_dot1as_ptp_initial_one_step_tx_oper_get (
    getcb_get2_t *get2cb,
    uint32 k_ptp_instance_index,
    uint16 k_ptp_port_index);


/**
 * @brief Get database object callback for leaf current-one-step-tx-oper (getcb_fn2_t)\n
 * Path: leaf /ptp/instances/instance/ports/port/port-ds/current-one-step-tx-oper\n
 *
 * Fill in 'get2cb' response fields.
 *
 * @param get2cb GET2 control block for the callback.
 * @param k_ptp_instance_index Ancestor key leaf 'instance-index' in list 'instance'\n
 * Path: /ptp:ptp/ptp:instances/ptp:instance/ptp:instance-index
 * @param k_ptp_port_index Ancestor key leaf 'port-index' in list 'port'\n
 * Path: /ptp:ptp/ptp:instances/ptp:instance/ptp:ports/ptp:port/ptp:port-index
 * @return return status of the callback.
 */
extern status_t u_dot1as_ptp_current_one_step_tx_oper_get (
    getcb_get2_t *get2cb,
    uint32 k_ptp_instance_index,
    uint16 k_ptp_port_index);


/**
 * @brief Get database object callback for leaf use-mgt-one-step-tx-oper (getcb_fn2_t)\n
 * Path: leaf /ptp/instances/instance/ports/port/port-ds/use-mgt-one-step-tx-oper\n
 *
 * Fill in 'get2cb' response fields.
 *
 * @param get2cb GET2 control block for the callback.
 * @param k_ptp_instance_index Ancestor key leaf 'instance-index' in list 'instance'\n
 * Path: /ptp:ptp/ptp:instances/ptp:instance/ptp:instance-index
 * @param k_ptp_port_index Ancestor key leaf 'port-index' in list 'port'\n
 * Path: /ptp:ptp/ptp:instances/ptp:instance/ptp:ports/ptp:port/ptp:port-index
 * @return return status of the callback.
 */
extern status_t u_dot1as_ptp_use_mgt_one_step_tx_oper_get (
    getcb_get2_t *get2cb,
    uint32 k_ptp_instance_index,
    uint16 k_ptp_port_index);


/**
 * @brief Get database object callback for leaf mgt-one-step-tx-oper (getcb_fn2_t)\n
 * Path: leaf /ptp/instances/instance/ports/port/port-ds/mgt-one-step-tx-oper\n
 *
 * Fill in 'get2cb' response fields.
 *
 * @param get2cb GET2 control block for the callback.
 * @param k_ptp_instance_index Ancestor key leaf 'instance-index' in list 'instance'\n
 * Path: /ptp:ptp/ptp:instances/ptp:instance/ptp:instance-index
 * @param k_ptp_port_index Ancestor key leaf 'port-index' in list 'port'\n
 * Path: /ptp:ptp/ptp:instances/ptp:instance/ptp:ports/ptp:port/ptp:port-index
 * @return return status of the callback.
 */
extern status_t u_dot1as_ptp_mgt_one_step_tx_oper_get (
    getcb_get2_t *get2cb,
    uint32 k_ptp_instance_index,
    uint16 k_ptp_port_index);


/**
 * @brief Get database object callback for leaf-list pdelay-truncated-timestamps (getcb_fn2_t)\n
 * Path: leaf-list /ptp/instances/instance/ports/port/port-ds/pdelay-truncated-timestamps\n
 *
 * Fill in 'get2cb' response fields.
 *
 * @param get2cb GET2 control block for the callback.
 * @param k_ptp_instance_index Ancestor key leaf 'instance-index' in list 'instance'\n
 * Path: /ptp:ptp/ptp:instances/ptp:instance/ptp:instance-index
 * @param k_ptp_port_index Ancestor key leaf 'port-index' in list 'port'\n
 * Path: /ptp:ptp/ptp:instances/ptp:instance/ptp:ports/ptp:port/ptp:port-index
 * @return return status of the callback.
 */
extern status_t u_dot1as_ptp_pdelay_truncated_timestamps_get (
    getcb_get2_t *get2cb,
    uint32 k_ptp_instance_index,
    uint16 k_ptp_port_index);


/**
 * @brief Get database object callback for container port-statistics-ds (getcb_fn2_t)\n
 * Path: container /ptp/instances/instance/ports/port/port-statistics-ds\n
 *
 * Fill in 'get2cb' response fields.
 *
 * @param get2cb GET2 control block for the callback.
 * @param k_ptp_instance_index Ancestor key leaf 'instance-index' in list 'instance'\n
 * Path: /ptp:ptp/ptp:instances/ptp:instance/ptp:instance-index
 * @param k_ptp_port_index Ancestor key leaf 'port-index' in list 'port'\n
 * Path: /ptp:ptp/ptp:instances/ptp:instance/ptp:ports/ptp:port/ptp:port-index
 * @return return status of the callback.
 */
extern status_t u_dot1as_ptp_port_statistics_ds_get (
    getcb_get2_t *get2cb,
    uint32 k_ptp_instance_index,
    uint16 k_ptp_port_index);


/**
 * @brief Phase 1: Initialize the ieee802-dot1as-ptp server instrumentation library.
 *
 * Called by server when module is loaded.
 *
 * @param modname requested module name to load
 * @param revision requested revision date of the module to load.
 * This may be NULL if the module has no revision statements.
 * @return return status. An error will cause the module load to fail.
 */
extern status_t u_ieee802_dot1as_ptp_init (
    const xmlChar *modname,
    const xmlChar *revision);


/**
 * @brief Phase 2: Initialize the ieee802-dot1as-ptp server instrumentation library.
 *
 * SIL init phase 2: non-config data structures.
 * Called after running config is loaded.
 *
 * @return return status. An error will cause the
 * server initialization to fail.
 */
extern status_t u_ieee802_dot1as_ptp_init2 (void);


/**
 * @brief Cleanup the ieee802-dot1as-ptp server instrumentation library.
 *
 * Called by server when module is unloaded.
 *
 */
extern void u_ieee802_dot1as_ptp_cleanup (void);


 /** @} */

#ifdef __cplusplus
} /* end extern 'C' */
#endif

#endif
