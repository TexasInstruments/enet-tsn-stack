/*
 * Copyright (c) 2023 Texas Instruments Incorporated
 * Copyright (c) 2023 Excelfore Corporation (https://excelfore.com)
 *
 * All rights reserved not granted herein.
 * Limited License.
 *
 * Texas Instruments Incorporated grants a world-wide, royalty-free,
 * non-exclusive license under copyrights and patents it now or hereafter
 * owns or controls to make, have made, use, import, offer to sell and sell ("Utilize")
 * this software subject to the terms herein. With respect to the foregoing patent
 * license, such license is granted solely to the extent that any such patent is necessary
 * to Utilize the software alone. The patent license shall not apply to any combinations which
 * include this software, other than combinations with devices manufactured by or for TI ("TI Devices").
 * No hardware patent is licensed hereunder.
 *
 * Redistributions must preserve existing copyright notices and reproduce this license (including the
 * above copyright notice and the disclaimer and (if applicable) source code license limitations below)
 * in the documentation and/or other materials provided with the distribution
 *
 * Redistribution and use in binary form, without modification, are permitted provided that the following
 * conditions are met:
 *
 * * No reverse engineering, decompilation, or disassembly of this software is permitted with respect to any
 * software provided in binary form.
 * * any redistribution and use are licensed by TI for use only with TI Devices.
 * * Nothing shall obligate TI to provide you with source code for the software licensed and provided to you in object code.
 *
 * If software source code is provided to you, modification and redistribution of the source code are permitted
 * provided that the following conditions are met:
 *
 * * any redistribution and use of the source code, including any resulting derivative works, are licensed by
 * TI for use only with TI Devices.
 * * any redistribution and use of any object code compiled from the source code and any resulting derivative
 * works, are licensed by TI for use only with TI Devices.
 *
 * Neither the name of Texas Instruments Incorporated nor the names of its suppliers may be used to endorse or
 * promote products derived from this software without specific prior written permission.
 *
 * DISCLAIMER.
 *
 * THIS SOFTWARE IS PROVIDED BY TI AND TI"S LICENSORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL TI AND TI"S LICENSORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
*/

#ifndef _H_y_ieee1588_ptp
#define _H_y_ieee1588_ptp
/*
 * Copyright (c) 2008 - 2012, Andy Bierman, All Rights Reserved.
 * Copyright (c) 2012 - 2022, YumaWorks, Inc., All Rights Reserved.
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 */

/**
 * @file y_ieee1588-ptp.h
 * @brief YumaPro SIL-SA header for module ieee1588-ptp
 *

*** Generated by yangdump-sdk 21.10-12

<pre>

    YumaPro SIL-SA header
    bundle x4ucsilsa
    module ieee1588-ptp
    revision 2022-08-30
    prefix ptp
    namespace urn:ieee:std:1588:yang:ieee1588-ptp
    organization IEEE 1588 Working Group
    Created: 2023-03-29T06:45:58Z

Online Developer Manual:
https://www.yumaworks.com/pub/21.10/dev/yumapro-dev-manual.html

    CLI parameters:
        defnames true
        deviation excelfore-interfaces
        deviation excelfore-gptp
        format yh
        indent 4
        module ietf-interfaces
        module ieee802-dot1q-bridge
        module ieee802-dot1q-tsn-config-uni
        module excelfore-interfaces
        module ieee1588-ptp
        module ieee802-dot1as-ptp
        module excelfore-gptp
        sil-bundle x4ucsilsa
        sil-edit2
        sil-get2
        sil-include tsn_uniconf/yangs/yang_db_access.h
        sil-include tsn_uniconf/yangs/yang_modules.h
        sil-sa
        unified true
</pre>

 */

#include <xmlstring.h>

#include "procdefs.h"
#include "dlq.h"
#include "ncxtypes.h"
#include "op.h"
#include "status.h"
#include "val.h"

#ifdef __cplusplus
extern "C" {
#endif

/**
 * @addtogroup yang-library YANG Library
 *
 * Collection of modules supported by the server.
 * Generated by yangdump-sdk.
 */



/**
 * @addtogroup silsa-x4ucsilsa-ieee1588-ptp Module ieee1588-ptp in Bundle x4ucsilsa
 * @ingroup silsa-x4ucsilsa
 *
 * @{
 *
 * YANG instrumentation library.
 * Generated by yangdump-sdk.
 */



#define y_ptp_M_ptp (const xmlChar *)"ieee1588-ptp"

#define y_ptp_R_ptp (const xmlChar *)"2022-08-30"

#define y_ptp_I_network_protocol (const xmlChar *)"network-protocol"
#define y_ptp_I_udp_ipv4 (const xmlChar *)"udp-ipv4"
#define y_ptp_I_udp_ipv6 (const xmlChar *)"udp-ipv6"
#define y_ptp_I_ieee802_3 (const xmlChar *)"ieee802-3"
#define y_ptp_I_devicenet (const xmlChar *)"devicenet"
#define y_ptp_I_controlnet (const xmlChar *)"controlnet"
#define y_ptp_I_profinet (const xmlChar *)"profinet"
#define y_ptp_I_otn (const xmlChar *)"otn"
#define y_ptp_I_unknown (const xmlChar *)"unknown"
#define y_ptp_I_clock_class (const xmlChar *)"clock-class"
#define y_ptp_I_cc_primary_sync (const xmlChar *)"cc-primary-sync"
#define y_ptp_I_cc_primary_sync_lost (const xmlChar *)"cc-primary-sync-lost"
#define y_ptp_I_cc_application_specific_sync (const xmlChar *)"cc-application-specific-sync"
#define y_ptp_I_cc_application_specific_sync_lost (const xmlChar *)"cc-application-specific-sync-lost"
#define y_ptp_I_cc_primary_sync_alternative_a (const xmlChar *)"cc-primary-sync-alternative-a"
#define y_ptp_I_cc_application_specific_alternative_a (const xmlChar *)"cc-application-specific-alternative-a"
#define y_ptp_I_cc_primary_sync_alternative_b (const xmlChar *)"cc-primary-sync-alternative-b"
#define y_ptp_I_cc_application_specific_alternative_b (const xmlChar *)"cc-application-specific-alternative-b"
#define y_ptp_I_cc_default (const xmlChar *)"cc-default"
#define y_ptp_I_cc_slave_only (const xmlChar *)"cc-slave-only"
#define y_ptp_I_clock_accuracy (const xmlChar *)"clock-accuracy"
#define y_ptp_I_ca_time_accurate_to_1000_fs (const xmlChar *)"ca-time-accurate-to-1000-fs"
#define y_ptp_I_ca_time_accurate_to_2500_fs (const xmlChar *)"ca-time-accurate-to-2500-fs"
#define y_ptp_I_ca_time_accurate_to_10_ps (const xmlChar *)"ca-time-accurate-to-10-ps"
#define y_ptp_I_ca_time_accurate_to_25ps (const xmlChar *)"ca-time-accurate-to-25ps"
#define y_ptp_I_ca_time_accurate_to_100_ps (const xmlChar *)"ca-time-accurate-to-100-ps"
#define y_ptp_I_ca_time_accurate_to_250_ps (const xmlChar *)"ca-time-accurate-to-250-ps"
#define y_ptp_I_ca_time_accurate_to_1000_ps (const xmlChar *)"ca-time-accurate-to-1000-ps"
#define y_ptp_I_ca_time_accurate_to_2500_ps (const xmlChar *)"ca-time-accurate-to-2500-ps"
#define y_ptp_I_ca_time_accurate_to_10_ns (const xmlChar *)"ca-time-accurate-to-10-ns"
#define y_ptp_I_ca_time_accurate_to_25_ns (const xmlChar *)"ca-time-accurate-to-25-ns"
#define y_ptp_I_ca_time_accurate_to_100_ns (const xmlChar *)"ca-time-accurate-to-100-ns"
#define y_ptp_I_ca_time_accurate_to_250_ns (const xmlChar *)"ca-time-accurate-to-250-ns"
#define y_ptp_I_ca_time_accurate_to_1000_ns (const xmlChar *)"ca-time-accurate-to-1000-ns"
#define y_ptp_I_ca_time_accurate_to_2500_ns (const xmlChar *)"ca-time-accurate-to-2500-ns"
#define y_ptp_I_ca_time_accurate_to_10_us (const xmlChar *)"ca-time-accurate-to-10-us"
#define y_ptp_I_ca_time_accurate_to_25_us (const xmlChar *)"ca-time-accurate-to-25-us"
#define y_ptp_I_ca_time_accurate_to_100_us (const xmlChar *)"ca-time-accurate-to-100-us"
#define y_ptp_I_ca_time_accurate_to_250_us (const xmlChar *)"ca-time-accurate-to-250-us"
#define y_ptp_I_ca_time_accurate_to_1000_us (const xmlChar *)"ca-time-accurate-to-1000-us"
#define y_ptp_I_ca_time_accurate_to_2500_us (const xmlChar *)"ca-time-accurate-to-2500-us"
#define y_ptp_I_ca_time_accurate_to_10_ms (const xmlChar *)"ca-time-accurate-to-10-ms"
#define y_ptp_I_ca_time_accurate_to_25_ms (const xmlChar *)"ca-time-accurate-to-25-ms"
#define y_ptp_I_ca_time_accurate_to_100_ms (const xmlChar *)"ca-time-accurate-to-100-ms"
#define y_ptp_I_ca_time_accurate_to_250_ms (const xmlChar *)"ca-time-accurate-to-250-ms"
#define y_ptp_I_ca_time_accurate_to_1_s (const xmlChar *)"ca-time-accurate-to-1-s"
#define y_ptp_I_ca_time_accurate_to_10_s (const xmlChar *)"ca-time-accurate-to-10-s"
#define y_ptp_I_ca_time_accurate_to_gt_10_s (const xmlChar *)"ca-time-accurate-to-gt-10-s"
#define y_ptp_I_time_source (const xmlChar *)"time-source"
#define y_ptp_I_atomic_clock (const xmlChar *)"atomic-clock"
#define y_ptp_I_gnss (const xmlChar *)"gnss"
#define y_ptp_I_terrestrial_radio (const xmlChar *)"terrestrial-radio"
#define y_ptp_I_serial_time_code (const xmlChar *)"serial-time-code"
#define y_ptp_I_ptp (const xmlChar *)"ptp"
#define y_ptp_I_ntp (const xmlChar *)"ntp"
#define y_ptp_I_hand_set (const xmlChar *)"hand-set"
#define y_ptp_I_other (const xmlChar *)"other"
#define y_ptp_I_internal_oscillator (const xmlChar *)"internal-oscillator"

#define y_ptp_N_acceptable_master_ds (const xmlChar *)"acceptable-master-ds"
#define y_ptp_N_acceptable_master_port_ds (const xmlChar *)"acceptable-master-port-ds"
#define y_ptp_N_acceptable_port_identity (const xmlChar *)"acceptable-port-identity"
#define y_ptp_N_address_field (const xmlChar *)"address-field"
#define y_ptp_N_address_length (const xmlChar *)"address-length"
#define y_ptp_N_alternate_master_port_ds (const xmlChar *)"alternate-master-port-ds"
#define y_ptp_N_alternate_priority1 (const xmlChar *)"alternate-priority1"
#define y_ptp_N_alternate_timescale_ds (const xmlChar *)"alternate-timescale-ds"
#define y_ptp_N_announce_foreign_rx (const xmlChar *)"announce-foreign-rx"
#define y_ptp_N_announce_receipt_timeout (const xmlChar *)"announce-receipt-timeout"
#define y_ptp_N_announce_rx (const xmlChar *)"announce-rx"
#define y_ptp_N_announce_tx (const xmlChar *)"announce-tx"
#define y_ptp_N_asymmetry_correction_port_ds (const xmlChar *)"asymmetry-correction-port-ds"
#define y_ptp_N_average_master_slave_delay (const xmlChar *)"average-master-slave-delay"
#define y_ptp_N_average_mean_link_delay (const xmlChar *)"average-mean-link-delay"
#define y_ptp_N_average_mean_path_delay (const xmlChar *)"average-mean-path-delay"
#define y_ptp_N_average_offset_from_master (const xmlChar *)"average-offset-from-master"
#define y_ptp_N_average_slave_master_delay (const xmlChar *)"average-slave-master-delay"
#define y_ptp_N_clock_accuracy (const xmlChar *)"clock-accuracy"
#define y_ptp_N_clock_class (const xmlChar *)"clock-class"
#define y_ptp_N_clock_identity (const xmlChar *)"clock-identity"
#define y_ptp_N_clock_quality (const xmlChar *)"clock-quality"
#define y_ptp_N_congruent_is_required (const xmlChar *)"congruent-is-required"
#define y_ptp_N_constant_asymmetry (const xmlChar *)"constant-asymmetry"
#define y_ptp_N_current_ds (const xmlChar *)"current-ds"
#define y_ptp_N_current_offset (const xmlChar *)"current-offset"
#define y_ptp_N_current_time (const xmlChar *)"current-time"
#define y_ptp_N_current_utc_offset (const xmlChar *)"current-utc-offset"
#define y_ptp_N_current_utc_offset_valid (const xmlChar *)"current-utc-offset-valid"
#define y_ptp_N_default_ds (const xmlChar *)"default-ds"
#define y_ptp_N_delay_asymmetry (const xmlChar *)"delay-asymmetry"
#define y_ptp_N_delay_mechanism (const xmlChar *)"delay-mechanism"
#define y_ptp_N_delay_req_rx (const xmlChar *)"delay-req-rx"
#define y_ptp_N_delay_req_tx (const xmlChar *)"delay-req-tx"
#define y_ptp_N_delay_resp_rx (const xmlChar *)"delay-resp-rx"
#define y_ptp_N_delay_resp_tx (const xmlChar *)"delay-resp-tx"
#define y_ptp_N_description (const xmlChar *)"description"
#define y_ptp_N_desired_state (const xmlChar *)"desired-state"
#define y_ptp_N_display_name (const xmlChar *)"display-name"
#define y_ptp_N_domain_number (const xmlChar *)"domain-number"
#define y_ptp_N_egress_latency (const xmlChar *)"egress-latency"
#define y_ptp_N_enable (const xmlChar *)"enable"
#define y_ptp_N_enabled (const xmlChar *)"enabled"
#define y_ptp_N_enhanced_metrics_ds (const xmlChar *)"enhanced-metrics-ds"
#define y_ptp_N_events_per_rx_sync_computed_tlv (const xmlChar *)"events-per-rx-sync-computed-tlv"
#define y_ptp_N_events_per_rx_sync_timing_tlv (const xmlChar *)"events-per-rx-sync-timing-tlv"
#define y_ptp_N_events_per_tx_timestamps_tlv (const xmlChar *)"events-per-tx-timestamps-tlv"
#define y_ptp_N_external_port_config_enable (const xmlChar *)"external-port-config-enable"
#define y_ptp_N_external_port_config_port_ds (const xmlChar *)"external-port-config-port-ds"
#define y_ptp_N_fault_log_ds (const xmlChar *)"fault-log-ds"
#define y_ptp_N_fault_record_list (const xmlChar *)"fault-record-list"
#define y_ptp_N_follow_up_rx (const xmlChar *)"follow-up-rx"
#define y_ptp_N_follow_up_tx (const xmlChar *)"follow-up-tx"
#define y_ptp_N_frequency_offset_tx (const xmlChar *)"frequency-offset-tx"
#define y_ptp_N_frequency_offset_tx_timestamp (const xmlChar *)"frequency-offset-tx-timestamp"
#define y_ptp_N_frequency_offset_tx_valid (const xmlChar *)"frequency-offset-tx-valid"
#define y_ptp_N_frequency_traceable (const xmlChar *)"frequency-traceable"
#define y_ptp_N_grandmaster_clock_quality (const xmlChar *)"grandmaster-clock-quality"
#define y_ptp_N_grandmaster_cluster_ds (const xmlChar *)"grandmaster-cluster-ds"
#define y_ptp_N_grandmaster_identity (const xmlChar *)"grandmaster-identity"
#define y_ptp_N_grandmaster_priority1 (const xmlChar *)"grandmaster-priority1"
#define y_ptp_N_grandmaster_priority2 (const xmlChar *)"grandmaster-priority2"
#define y_ptp_N_holdover_upgrade_ds (const xmlChar *)"holdover-upgrade-ds"
#define y_ptp_N_index (const xmlChar *)"index"
#define y_ptp_N_ingress_latency (const xmlChar *)"ingress-latency"
#define y_ptp_N_instance (const xmlChar *)"instance"
#define y_ptp_N_instance_index (const xmlChar *)"instance-index"
#define y_ptp_N_instances (const xmlChar *)"instances"
#define y_ptp_N_is_congruent (const xmlChar *)"is-congruent"
#define y_ptp_N_is_rx_coherent (const xmlChar *)"is-rx-coherent"
#define y_ptp_N_is_tx_coherent (const xmlChar *)"is-tx-coherent"
#define y_ptp_N_jump_seconds (const xmlChar *)"jump-seconds"
#define y_ptp_N_key_field (const xmlChar *)"key-field"
#define y_ptp_N_l1_sync_basic_port_ds (const xmlChar *)"l1-sync-basic-port-ds"
#define y_ptp_N_l1_sync_opt_params_port_ds (const xmlChar *)"l1-sync-opt-params-port-ds"
#define y_ptp_N_l1sync_receipt_timeout (const xmlChar *)"l1sync-receipt-timeout"
#define y_ptp_N_l1sync_state (const xmlChar *)"l1sync-state"
#define y_ptp_N_leap59 (const xmlChar *)"leap59"
#define y_ptp_N_leap61 (const xmlChar *)"leap61"
#define y_ptp_N_link_alive (const xmlChar *)"link-alive"
#define y_ptp_N_list (const xmlChar *)"list"
#define y_ptp_N_log_alt_multicast_sync_interval (const xmlChar *)"log-alt-multicast-sync-interval"
#define y_ptp_N_log_announce_interval (const xmlChar *)"log-announce-interval"
#define y_ptp_N_log_l1sync_interval (const xmlChar *)"log-l1sync-interval"
#define y_ptp_N_log_min_delay_req_interval (const xmlChar *)"log-min-delay-req-interval"
#define y_ptp_N_log_min_pdelay_req_interval (const xmlChar *)"log-min-pdelay-req-interval"
#define y_ptp_N_log_query_interval (const xmlChar *)"log-query-interval"
#define y_ptp_N_log_sync_interval (const xmlChar *)"log-sync-interval"
#define y_ptp_N_max_key (const xmlChar *)"max-key"
#define y_ptp_N_max_mean_link_delay (const xmlChar *)"max-mean-link-delay"
#define y_ptp_N_max_steps_removed (const xmlChar *)"max-steps-removed"
#define y_ptp_N_max_table_size (const xmlChar *)"max-table-size"
#define y_ptp_N_maximum_master_slave_delay (const xmlChar *)"maximum-master-slave-delay"
#define y_ptp_N_maximum_mean_path_delay (const xmlChar *)"maximum-mean-path-delay"
#define y_ptp_N_maximum_offset_from_master (const xmlChar *)"maximum-offset-from-master"
#define y_ptp_N_maximum_slave_master_delay (const xmlChar *)"maximum-slave-master-delay"
#define y_ptp_N_mean_delay (const xmlChar *)"mean-delay"
#define y_ptp_N_mean_link_delay (const xmlChar *)"mean-link-delay"
#define y_ptp_N_measurement_valid (const xmlChar *)"measurement-valid"
#define y_ptp_N_min_mean_link_delay (const xmlChar *)"min-mean-link-delay"
#define y_ptp_N_minimum_master_slave_delay (const xmlChar *)"minimum-master-slave-delay"
#define y_ptp_N_minimum_mean_path_delay (const xmlChar *)"minimum-mean-path-delay"
#define y_ptp_N_minimum_offset_from_master (const xmlChar *)"minimum-offset-from-master"
#define y_ptp_N_minimum_slave_master_delay (const xmlChar *)"minimum-slave-master-delay"
#define y_ptp_N_minor_version_number (const xmlChar *)"minor-version-number"
#define y_ptp_N_name (const xmlChar *)"name"
#define y_ptp_N_nanoseconds_field (const xmlChar *)"nanoseconds-field"
#define y_ptp_N_network_protocol (const xmlChar *)"network-protocol"
#define y_ptp_N_number_of_alt_masters (const xmlChar *)"number-of-alt-masters"
#define y_ptp_N_number_of_fault_records (const xmlChar *)"number-of-fault-records"
#define y_ptp_N_number_ports (const xmlChar *)"number-ports"
#define y_ptp_N_offset_from_master (const xmlChar *)"offset-from-master"
#define y_ptp_N_offset_scaled_log_variance (const xmlChar *)"offset-scaled-log-variance"
#define y_ptp_N_opt_params_enabled (const xmlChar *)"opt-params-enabled"
#define y_ptp_N_parent_ds (const xmlChar *)"parent-ds"
#define y_ptp_N_parent_port_identity (const xmlChar *)"parent-port-identity"
#define y_ptp_N_path_trace_ds (const xmlChar *)"path-trace-ds"
#define y_ptp_N_pdelay_req_rx (const xmlChar *)"pdelay-req-rx"
#define y_ptp_N_pdelay_req_tx (const xmlChar *)"pdelay-req-tx"
#define y_ptp_N_pdelay_resp_follow_up_rx (const xmlChar *)"pdelay-resp-follow-up-rx"
#define y_ptp_N_pdelay_resp_follow_up_tx (const xmlChar *)"pdelay-resp-follow-up-tx"
#define y_ptp_N_pdelay_resp_rx (const xmlChar *)"pdelay-resp-rx"
#define y_ptp_N_pdelay_resp_tx (const xmlChar *)"pdelay-resp-tx"
#define y_ptp_N_peer_congruent_is_required (const xmlChar *)"peer-congruent-is-required"
#define y_ptp_N_peer_is_congruent (const xmlChar *)"peer-is-congruent"
#define y_ptp_N_peer_is_rx_coherent (const xmlChar *)"peer-is-rx-coherent"
#define y_ptp_N_peer_is_tx_coherent (const xmlChar *)"peer-is-tx-coherent"
#define y_ptp_N_peer_rx_coherent_is_required (const xmlChar *)"peer-rx-coherent-is-required"
#define y_ptp_N_peer_tx_coherent_is_required (const xmlChar *)"peer-tx-coherent-is-required"
#define y_ptp_N_performance_monitoring_ds (const xmlChar *)"performance-monitoring-ds"
#define y_ptp_N_performance_monitoring_port_ds (const xmlChar *)"performance-monitoring-port-ds"
#define y_ptp_N_period_complete (const xmlChar *)"period-complete"
#define y_ptp_N_phase_offset_tx (const xmlChar *)"phase-offset-tx"
#define y_ptp_N_phase_offset_tx_timestamp (const xmlChar *)"phase-offset-tx-timestamp"
#define y_ptp_N_phase_offset_tx_valid (const xmlChar *)"phase-offset-tx-valid"
#define y_ptp_N_pm_time (const xmlChar *)"pm-time"
#define y_ptp_N_port (const xmlChar *)"port"
#define y_ptp_N_port_address (const xmlChar *)"port-address"
#define y_ptp_N_port_ds (const xmlChar *)"port-ds"
#define y_ptp_N_port_enable (const xmlChar *)"port-enable"
#define y_ptp_N_port_identity (const xmlChar *)"port-identity"
#define y_ptp_N_port_index (const xmlChar *)"port-index"
#define y_ptp_N_port_number (const xmlChar *)"port-number"
#define y_ptp_N_ports (const xmlChar *)"ports"
#define y_ptp_N_priority1 (const xmlChar *)"priority1"
#define y_ptp_N_priority2 (const xmlChar *)"priority2"
#define y_ptp_N_protocol_address (const xmlChar *)"protocol-address"
#define y_ptp_N_ptp (const xmlChar *)"ptp"
#define y_ptp_N_ptp_timescale (const xmlChar *)"ptp-timescale"
#define y_ptp_N_record_list (const xmlChar *)"record-list"
#define y_ptp_N_record_list_peer_delay (const xmlChar *)"record-list-peer-delay"
#define y_ptp_N_reset (const xmlChar *)"reset"
#define y_ptp_N_rx_coherent_is_required (const xmlChar *)"rx-coherent-is-required"
#define y_ptp_N_rx_sync_computed_tlv_message_m (const xmlChar *)"rx-sync-computed-tlv-message-m"
#define y_ptp_N_rx_sync_timing_tlv_message_m (const xmlChar *)"rx-sync-timing-tlv-message-m"
#define y_ptp_N_scaled_delay_coefficient (const xmlChar *)"scaled-delay-coefficient"
#define y_ptp_N_sdo_id (const xmlChar *)"sdo-id"
#define y_ptp_N_seconds_field (const xmlChar *)"seconds-field"
#define y_ptp_N_severity (const xmlChar *)"severity"
#define y_ptp_N_slave_monitoring_port_ds (const xmlChar *)"slave-monitoring-port-ds"
#define y_ptp_N_slave_only (const xmlChar *)"slave-only"
#define y_ptp_N_stddev_master_slave_delay (const xmlChar *)"stddev-master-slave-delay"
#define y_ptp_N_stddev_mean_link_delay (const xmlChar *)"stddev-mean-link-delay"
#define y_ptp_N_stddev_mean_path_delay (const xmlChar *)"stddev-mean-path-delay"
#define y_ptp_N_stddev_offset_from_master (const xmlChar *)"stddev-offset-from-master"
#define y_ptp_N_stddev_slave_master_delay (const xmlChar *)"stddev-slave-master-delay"
#define y_ptp_N_steps_removed (const xmlChar *)"steps-removed"
#define y_ptp_N_sync_rx (const xmlChar *)"sync-rx"
#define y_ptp_N_sync_tx (const xmlChar *)"sync-tx"
#define y_ptp_N_time (const xmlChar *)"time"
#define y_ptp_N_time_of_next_jump (const xmlChar *)"time-of-next-jump"
#define y_ptp_N_time_properties_ds (const xmlChar *)"time-properties-ds"
#define y_ptp_N_time_source (const xmlChar *)"time-source"
#define y_ptp_N_time_traceable (const xmlChar *)"time-traceable"
#define y_ptp_N_timestamp_correction_port_ds (const xmlChar *)"timestamp-correction-port-ds"
#define y_ptp_N_timestamps_corrected_tx (const xmlChar *)"timestamps-corrected-tx"
#define y_ptp_N_tx_alt_multicast_sync (const xmlChar *)"tx-alt-multicast-sync"
#define y_ptp_N_tx_coherent_is_required (const xmlChar *)"tx-coherent-is-required"
#define y_ptp_N_tx_event_type (const xmlChar *)"tx-event-type"
#define y_ptp_N_tx_timestamps_tlv_message_m (const xmlChar *)"tx-timestamps-tlv-message-m"
#define y_ptp_N_underlying_interface (const xmlChar *)"underlying-interface"
#define y_ptp_N_unicast_discovery_port_ds (const xmlChar *)"unicast-discovery-port-ds"
#define y_ptp_N_unicast_negotiation_port_ds (const xmlChar *)"unicast-negotiation-port-ds"
#define y_ptp_N_value (const xmlChar *)"value"
#define y_ptp_N_version_number (const xmlChar *)"version-number"



/**
 * @brief Phase 1: Initialize the ieee1588-ptp server instrumentation library.
 *
 * Called by server when module is loaded.
 *
 * @param modname requested module name to load
 * @param revision requested revision date of the module to load.
 * This may be NULL if the module has no revision statements.
 * @return return status. An error will cause the module load to fail.
 */
extern status_t y_ieee1588_ptp_init (
    const xmlChar *modname,
    const xmlChar *revision);


/**
 * @brief Phase 2: Initialize the ieee1588-ptp server instrumentation library.
 *
 * SIL init phase 2: non-config data structures.
 * Called after running config is loaded.
 *
 * @return return status. An error will cause the
 * server initialization to fail.
 */
extern status_t y_ieee1588_ptp_init2 (void);


/**
 * @brief Cleanup the ieee1588-ptp server instrumentation library.
 *
 * Called by server when module is unloaded.
 *
 */
extern void y_ieee1588_ptp_cleanup (void);


 /** @} */

#ifdef __cplusplus
} /* end extern 'C' */
#endif

#endif
